// Code generated by protoc-gen-gogo.
// source: github.com/fuserobotics/proto/device/device.proto
// DO NOT EDIT!

package device

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import common "github.com/fuserobotics/proto/common"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Device_DeviceInterfaceConfig_WifiConfig_WifiNetworkType int32

const (
	// Standard wifi access point
	Device_DeviceInterfaceConfig_WifiConfig_AP    Device_DeviceInterfaceConfig_WifiConfig_WifiNetworkType = 0
	Device_DeviceInterfaceConfig_WifiConfig_ADHOC Device_DeviceInterfaceConfig_WifiConfig_WifiNetworkType = 1
)

var Device_DeviceInterfaceConfig_WifiConfig_WifiNetworkType_name = map[int32]string{
	0: "AP",
	1: "ADHOC",
}
var Device_DeviceInterfaceConfig_WifiConfig_WifiNetworkType_value = map[string]int32{
	"AP":    0,
	"ADHOC": 1,
}

func (x Device_DeviceInterfaceConfig_WifiConfig_WifiNetworkType) String() string {
	return proto.EnumName(Device_DeviceInterfaceConfig_WifiConfig_WifiNetworkType_name, int32(x))
}
func (Device_DeviceInterfaceConfig_WifiConfig_WifiNetworkType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorDevice, []int{0, 1, 0, 0}
}

// Device: a full-linux computer running consul, docker stack
type Device struct {
	Hostname        string                        `protobuf:"bytes,1,opt,name=hostname,proto3" json:"hostname,omitempty"`
	Region          string                        `protobuf:"bytes,2,opt,name=region,proto3" json:"region,omitempty"`
	NetworkSettings *Device_DeviceNetworkSettings `protobuf:"bytes,3,opt,name=network_settings,json=networkSettings" json:"network_settings,omitempty"`
	Identity        *Device_DeviceIdentity        `protobuf:"bytes,4,opt,name=identity" json:"identity,omitempty"`
}

func (m *Device) Reset()                    { *m = Device{} }
func (m *Device) String() string            { return proto.CompactTextString(m) }
func (*Device) ProtoMessage()               {}
func (*Device) Descriptor() ([]byte, []int) { return fileDescriptorDevice, []int{0} }

func (m *Device) GetNetworkSettings() *Device_DeviceNetworkSettings {
	if m != nil {
		return m.NetworkSettings
	}
	return nil
}

func (m *Device) GetIdentity() *Device_DeviceIdentity {
	if m != nil {
		return m.Identity
	}
	return nil
}

type Device_DeviceNetworkSettings struct {
	Ip        *common.IPAddress               `protobuf:"bytes,1,opt,name=ip" json:"ip,omitempty"`
	Interface []*Device_DeviceInterfaceConfig `protobuf:"bytes,2,rep,name=interface" json:"interface,omitempty"`
}

func (m *Device_DeviceNetworkSettings) Reset()         { *m = Device_DeviceNetworkSettings{} }
func (m *Device_DeviceNetworkSettings) String() string { return proto.CompactTextString(m) }
func (*Device_DeviceNetworkSettings) ProtoMessage()    {}
func (*Device_DeviceNetworkSettings) Descriptor() ([]byte, []int) {
	return fileDescriptorDevice, []int{0, 0}
}

func (m *Device_DeviceNetworkSettings) GetIp() *common.IPAddress {
	if m != nil {
		return m.Ip
	}
	return nil
}

func (m *Device_DeviceNetworkSettings) GetInterface() []*Device_DeviceInterfaceConfig {
	if m != nil {
		return m.Interface
	}
	return nil
}

type Device_DeviceInterfaceConfig struct {
	Devname      string                                   `protobuf:"bytes,1,opt,name=devname,proto3" json:"devname,omitempty"`
	Ip           *common.IPAddress                        `protobuf:"bytes,2,opt,name=ip" json:"ip,omitempty"`
	GatewayIp    *common.IPAddress                        `protobuf:"bytes,3,opt,name=gateway_ip,json=gatewayIp" json:"gateway_ip,omitempty"`
	WifiSettings *Device_DeviceInterfaceConfig_WifiConfig `protobuf:"bytes,4,opt,name=wifi_settings,json=wifiSettings" json:"wifi_settings,omitempty"`
	Dns          []*common.IPAddress                      `protobuf:"bytes,5,rep,name=dns" json:"dns,omitempty"`
}

func (m *Device_DeviceInterfaceConfig) Reset()         { *m = Device_DeviceInterfaceConfig{} }
func (m *Device_DeviceInterfaceConfig) String() string { return proto.CompactTextString(m) }
func (*Device_DeviceInterfaceConfig) ProtoMessage()    {}
func (*Device_DeviceInterfaceConfig) Descriptor() ([]byte, []int) {
	return fileDescriptorDevice, []int{0, 1}
}

func (m *Device_DeviceInterfaceConfig) GetIp() *common.IPAddress {
	if m != nil {
		return m.Ip
	}
	return nil
}

func (m *Device_DeviceInterfaceConfig) GetGatewayIp() *common.IPAddress {
	if m != nil {
		return m.GatewayIp
	}
	return nil
}

func (m *Device_DeviceInterfaceConfig) GetWifiSettings() *Device_DeviceInterfaceConfig_WifiConfig {
	if m != nil {
		return m.WifiSettings
	}
	return nil
}

func (m *Device_DeviceInterfaceConfig) GetDns() []*common.IPAddress {
	if m != nil {
		return m.Dns
	}
	return nil
}

type Device_DeviceInterfaceConfig_WifiConfig struct {
	Network      []*Device_DeviceInterfaceConfig_WifiConfig_WifiNetwork `protobuf:"bytes,1,rep,name=network" json:"network,omitempty"`
	ExtraOptions string                                                 `protobuf:"bytes,2,opt,name=extra_options,json=extraOptions,proto3" json:"extra_options,omitempty"`
}

func (m *Device_DeviceInterfaceConfig_WifiConfig) Reset() {
	*m = Device_DeviceInterfaceConfig_WifiConfig{}
}
func (m *Device_DeviceInterfaceConfig_WifiConfig) String() string { return proto.CompactTextString(m) }
func (*Device_DeviceInterfaceConfig_WifiConfig) ProtoMessage()    {}
func (*Device_DeviceInterfaceConfig_WifiConfig) Descriptor() ([]byte, []int) {
	return fileDescriptorDevice, []int{0, 1, 0}
}

func (m *Device_DeviceInterfaceConfig_WifiConfig) GetNetwork() []*Device_DeviceInterfaceConfig_WifiConfig_WifiNetwork {
	if m != nil {
		return m.Network
	}
	return nil
}

type Device_DeviceInterfaceConfig_WifiConfig_WifiNetwork struct {
	Ssid         string                                                  `protobuf:"bytes,1,opt,name=ssid,proto3" json:"ssid,omitempty"`
	NetType      Device_DeviceInterfaceConfig_WifiConfig_WifiNetworkType `protobuf:"varint,9,opt,name=net_type,json=netType,proto3,enum=device.Device_DeviceInterfaceConfig_WifiConfig_WifiNetworkType" json:"net_type,omitempty"`
	Psk          string                                                  `protobuf:"bytes,6,opt,name=psk,proto3" json:"psk,omitempty"`
	PskEncoded   bool                                                    `protobuf:"varint,10,opt,name=psk_encoded,json=pskEncoded,proto3" json:"psk_encoded,omitempty"`
	Proto        string                                                  `protobuf:"bytes,2,opt,name=proto,proto3" json:"proto,omitempty"`
	KeyMgmt      string                                                  `protobuf:"bytes,3,opt,name=key_mgmt,json=keyMgmt,proto3" json:"key_mgmt,omitempty"`
	Pairwise     string                                                  `protobuf:"bytes,4,opt,name=pairwise,proto3" json:"pairwise,omitempty"`
	Group        string                                                  `protobuf:"bytes,5,opt,name=group,proto3" json:"group,omitempty"`
	Frequency    string                                                  `protobuf:"bytes,8,opt,name=frequency,proto3" json:"frequency,omitempty"`
	ExtraOptions string                                                  `protobuf:"bytes,7,opt,name=extra_options,json=extraOptions,proto3" json:"extra_options,omitempty"`
}

func (m *Device_DeviceInterfaceConfig_WifiConfig_WifiNetwork) Reset() {
	*m = Device_DeviceInterfaceConfig_WifiConfig_WifiNetwork{}
}
func (m *Device_DeviceInterfaceConfig_WifiConfig_WifiNetwork) String() string {
	return proto.CompactTextString(m)
}
func (*Device_DeviceInterfaceConfig_WifiConfig_WifiNetwork) ProtoMessage() {}
func (*Device_DeviceInterfaceConfig_WifiConfig_WifiNetwork) Descriptor() ([]byte, []int) {
	return fileDescriptorDevice, []int{0, 1, 0, 0}
}

type Device_DeviceIdentity struct {
	// Generated certs, latest is first
	Chain     []*common.CertChain `protobuf:"bytes,2,rep,name=chain" json:"chain,omitempty"`
	PublicKey string              `protobuf:"bytes,3,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
}

func (m *Device_DeviceIdentity) Reset()                    { *m = Device_DeviceIdentity{} }
func (m *Device_DeviceIdentity) String() string            { return proto.CompactTextString(m) }
func (*Device_DeviceIdentity) ProtoMessage()               {}
func (*Device_DeviceIdentity) Descriptor() ([]byte, []int) { return fileDescriptorDevice, []int{0, 2} }

func (m *Device_DeviceIdentity) GetChain() []*common.CertChain {
	if m != nil {
		return m.Chain
	}
	return nil
}

type DeviceNetworkTemplate struct {
	Id          string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
}

func (m *DeviceNetworkTemplate) Reset()                    { *m = DeviceNetworkTemplate{} }
func (m *DeviceNetworkTemplate) String() string            { return proto.CompactTextString(m) }
func (*DeviceNetworkTemplate) ProtoMessage()               {}
func (*DeviceNetworkTemplate) Descriptor() ([]byte, []int) { return fileDescriptorDevice, []int{1} }

func init() {
	proto.RegisterType((*Device)(nil), "device.Device")
	proto.RegisterType((*Device_DeviceNetworkSettings)(nil), "device.Device.DeviceNetworkSettings")
	proto.RegisterType((*Device_DeviceInterfaceConfig)(nil), "device.Device.DeviceInterfaceConfig")
	proto.RegisterType((*Device_DeviceInterfaceConfig_WifiConfig)(nil), "device.Device.DeviceInterfaceConfig.WifiConfig")
	proto.RegisterType((*Device_DeviceInterfaceConfig_WifiConfig_WifiNetwork)(nil), "device.Device.DeviceInterfaceConfig.WifiConfig.WifiNetwork")
	proto.RegisterType((*Device_DeviceIdentity)(nil), "device.Device.DeviceIdentity")
	proto.RegisterType((*DeviceNetworkTemplate)(nil), "device.DeviceNetworkTemplate")
	proto.RegisterEnum("device.Device_DeviceInterfaceConfig_WifiConfig_WifiNetworkType", Device_DeviceInterfaceConfig_WifiConfig_WifiNetworkType_name, Device_DeviceInterfaceConfig_WifiConfig_WifiNetworkType_value)
}

var fileDescriptorDevice = []byte{
	// 640 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xa4, 0x53, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0xa6, 0x49, 0xe3, 0xc6, 0x93, 0xfe, 0x84, 0x11, 0x20, 0x63, 0x51, 0x51, 0x4a, 0x25, 0x38,
	0x25, 0x50, 0x4e, 0x88, 0x03, 0x2a, 0x29, 0x12, 0x11, 0x82, 0x56, 0xa6, 0x08, 0x84, 0x84, 0x2c,
	0xc7, 0xde, 0xb8, 0xab, 0x36, 0x5e, 0xb3, 0xbb, 0x21, 0xe4, 0xc2, 0x95, 0x03, 0x2f, 0xc3, 0xd3,
	0xf0, 0x3c, 0x8c, 0xd7, 0x9b, 0x9f, 0xb6, 0x29, 0x3f, 0xe2, 0xe4, 0x99, 0x6f, 0x66, 0x3e, 0xcf,
	0x37, 0xb3, 0x03, 0x0f, 0x53, 0xae, 0x8f, 0x87, 0xbd, 0x56, 0x2c, 0x06, 0xed, 0xfe, 0x50, 0x31,
	0x29, 0x7a, 0x42, 0xf3, 0x58, 0xb5, 0x73, 0x29, 0xb4, 0x68, 0x27, 0xec, 0x33, 0x8f, 0x99, 0xfd,
	0xb4, 0x0c, 0x86, 0x4e, 0xe9, 0xf9, 0x7f, 0x28, 0x25, 0x78, 0x20, 0x32, 0xfb, 0x29, 0x4b, 0xb7,
	0x7f, 0xb8, 0xe0, 0xec, 0x9b, 0x6a, 0xf4, 0xa1, 0x7e, 0x2c, 0x94, 0xce, 0xa2, 0x01, 0xf3, 0x96,
	0xb6, 0x96, 0xee, 0xbb, 0xc1, 0xd4, 0xc7, 0x1b, 0xe0, 0x48, 0x96, 0x72, 0x91, 0x79, 0x15, 0x13,
	0xb1, 0x1e, 0x1e, 0x40, 0x33, 0x63, 0x7a, 0x24, 0xe4, 0x49, 0xa8, 0x98, 0xd6, 0x3c, 0x4b, 0x95,
	0x57, 0xa5, 0x8c, 0xc6, 0xee, 0x4e, 0xcb, 0xb6, 0xb8, 0x3f, 0xff, 0x79, 0x5d, 0x26, 0xbf, 0xb1,
	0xb9, 0xc1, 0x46, 0x76, 0x16, 0xc0, 0xc7, 0x50, 0xe7, 0x09, 0xcb, 0x34, 0xd7, 0x63, 0x6f, 0xd9,
	0x10, 0x6d, 0x2e, 0x24, 0xea, 0xda, 0xa4, 0x60, 0x9a, 0xee, 0x7f, 0x85, 0xeb, 0x0b, 0x7f, 0x82,
	0x77, 0xa0, 0xc2, 0x73, 0x23, 0xa9, 0xb1, 0x7b, 0xb5, 0x65, 0xe5, 0x77, 0x0f, 0xf7, 0x92, 0x44,
	0x32, 0xa5, 0x02, 0x0a, 0xe2, 0x33, 0x70, 0x79, 0xa6, 0x99, 0xec, 0x47, 0x31, 0x23, 0x89, 0xd5,
	0x4b, 0x05, 0x74, 0x27, 0x59, 0x1d, 0x91, 0xf5, 0x79, 0x1a, 0xcc, 0xca, 0xfc, 0xef, 0xce, 0xa4,
	0x81, 0x73, 0x49, 0xe8, 0xc1, 0x0a, 0x71, 0xcd, 0x0d, 0x76, 0xe2, 0xda, 0xd6, 0x2a, 0xbf, 0x6b,
	0xed, 0x01, 0x40, 0x1a, 0x69, 0x36, 0x8a, 0xc6, 0x21, 0xa5, 0x56, 0x2f, 0x4b, 0x75, 0x6d, 0x52,
	0x37, 0xc7, 0x23, 0x58, 0x1b, 0xf1, 0x3e, 0x9f, 0x6d, 0xa4, 0x1c, 0x64, 0xfb, 0x6f, 0x04, 0xb5,
	0xde, 0x51, 0xa5, 0xd5, 0xb6, 0x5a, 0xb0, 0x4c, 0xa7, 0x78, 0x17, 0xaa, 0x49, 0xa6, 0xbc, 0x9a,
	0x19, 0xce, 0x82, 0x06, 0x8a, 0xa8, 0xff, 0x6d, 0x19, 0x60, 0xc6, 0x80, 0x6f, 0x61, 0xc5, 0x2e,
	0x98, 0x84, 0x17, 0x75, 0x4f, 0xfe, 0xb1, 0x07, 0x63, 0xda, 0x7d, 0x06, 0x13, 0x2e, 0x6a, 0x65,
	0x8d, 0x7d, 0xd1, 0x32, 0x0a, 0x45, 0xae, 0xe9, 0x15, 0x2a, 0xfb, 0x28, 0x57, 0x0d, 0x78, 0x50,
	0x62, 0xfe, 0xcf, 0x0a, 0x34, 0xe6, 0xaa, 0x11, 0x61, 0x59, 0x29, 0x9e, 0xd8, 0x0d, 0x18, 0x1b,
	0x3f, 0x40, 0x9d, 0x38, 0x43, 0x3d, 0xce, 0x99, 0xe7, 0x12, 0xbe, 0xbe, 0xfb, 0xf4, 0x3f, 0x1a,
	0x3c, 0x22, 0x1a, 0xd3, 0x64, 0x61, 0x60, 0x13, 0xaa, 0xb9, 0x3a, 0xf1, 0x1c, 0xf3, 0xbb, 0xc2,
	0xc4, 0xdb, 0xd0, 0xa0, 0x4f, 0xc8, 0xb2, 0x58, 0x24, 0x2c, 0xf1, 0x80, 0x22, 0xf5, 0x00, 0x08,
	0x7a, 0x5e, 0x22, 0x78, 0x0d, 0x6a, 0xe6, 0x2a, 0xad, 0x9e, 0xd2, 0xc1, 0x9b, 0x50, 0x3f, 0x61,
	0xe3, 0x70, 0x90, 0x0e, 0xb4, 0x59, 0x3f, 0x3d, 0x1f, 0xf2, 0x5f, 0x91, 0x5b, 0x9c, 0x6c, 0x1e,
	0x71, 0x39, 0xe2, 0x8a, 0x99, 0x25, 0xd3, 0xc9, 0x4e, 0xfc, 0x82, 0x2c, 0x95, 0x62, 0x98, 0xd3,
	0xc6, 0x0c, 0x99, 0x71, 0xf0, 0x16, 0xb8, 0x7d, 0xc9, 0x3e, 0x0d, 0xa9, 0x89, 0xb1, 0x57, 0x37,
	0x91, 0x19, 0x70, 0x71, 0xb0, 0x2b, 0x17, 0x07, 0xbb, 0xbd, 0x03, 0x1b, 0xe7, 0x44, 0xa3, 0x03,
	0x95, 0xbd, 0xc3, 0xe6, 0x15, 0x74, 0xa1, 0xb6, 0xb7, 0xff, 0xe2, 0xa0, 0xd3, 0x5c, 0xf2, 0xdf,
	0xc3, 0xfa, 0xd9, 0x4b, 0xc5, 0x7b, 0x50, 0x8b, 0x8f, 0x23, 0x9e, 0xd9, 0xfb, 0x9a, 0x3e, 0xa1,
	0x0e, 0x93, 0xba, 0x53, 0x04, 0x82, 0x32, 0x8e, 0x9b, 0x00, 0xf9, 0xb0, 0x77, 0xca, 0xe3, 0x90,
	0x74, 0x5a, 0xc9, 0x6e, 0x89, 0xbc, 0x64, 0xe3, 0xed, 0x8f, 0xe7, 0xee, 0xfc, 0x88, 0x0d, 0xf2,
	0x53, 0x7a, 0xfc, 0xb8, 0x4e, 0xc7, 0x34, 0xd9, 0x2f, 0x59, 0xc5, 0xc6, 0xcd, 0xcd, 0x95, 0xd3,
	0x34, 0x36, 0x6e, 0x41, 0x23, 0x61, 0x2a, 0x96, 0xdc, 0x88, 0xb1, 0xe4, 0xf3, 0x50, 0xcf, 0x31,
	0x53, 0x7f, 0xf4, 0x2b, 0x00, 0x00, 0xff, 0xff, 0x93, 0x02, 0x19, 0x57, 0x88, 0x05, 0x00, 0x00,
}
