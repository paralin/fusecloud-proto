syntax = "proto3";
package device;

import "github.com/fuserobotics/proto/common/common.proto";

/* Device: a full-linux computer running serf, docker stack */
message Device {
  string hostname = 1;
  string region = 2;

  DeviceNetworkSettings network_settings = 3;
  DeviceIdentity identity = 4;

  message DeviceNetworkSettings {
    common.IPAddress ip = 1;
    // reserved field 2, 3
    repeated DeviceConnection connection = 4;
  }

  message DeviceIdentity {
    /* Unused fields: 1 pkey */
    /* Generated certs, latest is first */
    repeated common.CertChain chain = 2;
    string public_key = 3;
  }
}

// DeviceConnectionConfig represents a NetworkManager connection.
message DeviceConnection {
  // reserved 1
  // auto_connect controls if the device should automatically use this connection or not.
  bool auto_connect = 2;
  // auto_connect_priority: higher numbers -> higher priority
  int32 auto_connect_priority = 3;
  // auto_connect_retries - how many connection attempts?
  int32 auto_connect_retries = 4;
  // interface restricts the connection to a specific interface.
  string interface = 5;

  // type controls what kind of connection this is
  DeviceConnectionType type = 6;

  // ipv4 settings
  IPV4Config ipv4 = 7;
  // wifi settings
  WifiConfig wifi = 8;
  // ethernet settings
  EthernetConfig ethernet = 9;

  message EthernetConfig {
  }

  message WifiConfig {
    string ssid = 1;
    WifiMode mode = 2;
    WifiSecurity security = 3;

    enum WifiMode {
      WIFI_INFRA = 0;
      WIFI_ADHOC = 1;
      WIFI_AP = 2;
    }
  }

  message WifiSecurity {
    WifiSecurityMode mode = 1;
    // username, if using enterprise.
    string username = 2;
    // password, if using personal
    string password = 3;

    // TODO: mschapv2, etc

    enum WifiSecurityMode {
      // None to explicitly disable security
      WIFI_SEC_NONE = 0;
      // WPA and WPA2 Personal
      WIFI_SEC_PERSONAL = 1;
      // WPA and WPA2 Enterprise
      WIFI_SEC_ENTERPRISE = 2;
    }
  }

  message IPV4Config {
    IPV4Method method = 1;
    repeated common.IPRange address = 2;
    repeated common.IPAddress dns = 3;
    repeated string dns_search = 4;
    // if set, we will ignore DNS servers given by the DHCP server
    bool disable_auto_dns = 5;

    enum IPV4Method {
      IPV4_DISABLED = 0;
      IPV4_AUTOMATIC = 1;
      IPV4_MANUAL = 2;
    }
  }
}

enum DeviceConnectionType {
  // Ethernet connection
  CONN_ETH = 0;
  // Wifi connection
  CONN_WIFI = 1;
}

enum DeviceStatus {
  UNKNOWN = 0;
  ALIVE = 1;
}
