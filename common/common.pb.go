// Code generated by protoc-gen-gogo.
// source: github.com/fuserobotics/proto/common/common.proto
// DO NOT EDIT!

/*
Package common is a generated protocol buffer package.

It is generated from these files:
	github.com/fuserobotics/proto/common/common.proto

It has these top-level messages:
	IPRange
	IPAddress
	CertChain
	GeoLocation
*/
package common

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.GoGoProtoPackageIsVersion1

// IP address CIDR
type IPRange struct {
	// IP data
	Ip *IPAddress `protobuf:"bytes,1,opt,name=ip" json:"ip,omitempty"`
	// Prefix length: 0->32
	Plen uint32 `protobuf:"varint,2,opt,name=plen,proto3" json:"plen,omitempty"`
}

func (m *IPRange) Reset()                    { *m = IPRange{} }
func (m *IPRange) String() string            { return proto.CompactTextString(m) }
func (*IPRange) ProtoMessage()               {}
func (*IPRange) Descriptor() ([]byte, []int) { return fileDescriptorCommon, []int{0} }

func (m *IPRange) GetIp() *IPAddress {
	if m != nil {
		return m.Ip
	}
	return nil
}

type IPAddress struct {
	Address []uint32 `protobuf:"varint,1,rep,packed,name=address" json:"address,omitempty"`
}

func (m *IPAddress) Reset()                    { *m = IPAddress{} }
func (m *IPAddress) String() string            { return proto.CompactTextString(m) }
func (*IPAddress) ProtoMessage()               {}
func (*IPAddress) Descriptor() ([]byte, []int) { return fileDescriptorCommon, []int{1} }

// Certificate chain
type CertChain struct {
	// Cert chain, idx 0 should be last cert.
	Cert       []string `protobuf:"bytes,1,rep,name=cert" json:"cert,omitempty"`
	ValidUntil int64    `protobuf:"varint,2,opt,name=valid_until,json=validUntil,proto3" json:"valid_until,omitempty"`
	Csr        string   `protobuf:"bytes,3,opt,name=csr,proto3" json:"csr,omitempty"`
	CsrWaiting bool     `protobuf:"varint,4,opt,name=csr_waiting,json=csrWaiting,proto3" json:"csr_waiting,omitempty"`
}

func (m *CertChain) Reset()                    { *m = CertChain{} }
func (m *CertChain) String() string            { return proto.CompactTextString(m) }
func (*CertChain) ProtoMessage()               {}
func (*CertChain) Descriptor() ([]byte, []int) { return fileDescriptorCommon, []int{2} }

// Equivilent to Point in RethinkDB
type GeoLocation struct {
	Latitude  float64 `protobuf:"fixed64,1,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude float64 `protobuf:"fixed64,2,opt,name=longitude,proto3" json:"longitude,omitempty"`
}

func (m *GeoLocation) Reset()                    { *m = GeoLocation{} }
func (m *GeoLocation) String() string            { return proto.CompactTextString(m) }
func (*GeoLocation) ProtoMessage()               {}
func (*GeoLocation) Descriptor() ([]byte, []int) { return fileDescriptorCommon, []int{3} }

func init() {
	proto.RegisterType((*IPRange)(nil), "common.IPRange")
	proto.RegisterType((*IPAddress)(nil), "common.IPAddress")
	proto.RegisterType((*CertChain)(nil), "common.CertChain")
	proto.RegisterType((*GeoLocation)(nil), "common.GeoLocation")
}

var fileDescriptorCommon = []byte{
	// 270 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x44, 0x90, 0xc1, 0x4b, 0xc3, 0x30,
	0x14, 0xc6, 0x69, 0x3b, 0xb6, 0xf5, 0x8d, 0xc1, 0xcc, 0xa9, 0x88, 0xa0, 0xf6, 0x34, 0x2f, 0x2d,
	0xea, 0x3f, 0xa0, 0xee, 0x30, 0x06, 0x1e, 0x46, 0x40, 0x3c, 0x8e, 0xb4, 0x8d, 0x5d, 0x20, 0xcb,
	0x2b, 0x49, 0xaa, 0xff, 0xbe, 0xaf, 0xe9, 0x9c, 0xa7, 0xf7, 0x7d, 0xbf, 0xef, 0xeb, 0x6b, 0x12,
	0x78, 0x6c, 0x95, 0x3f, 0xf6, 0x55, 0x51, 0xe3, 0xa9, 0xfc, 0xea, 0x9d, 0xb4, 0x58, 0xa1, 0x57,
	0xb5, 0x2b, 0x3b, 0x8b, 0x1e, 0x4b, 0xc2, 0x27, 0x34, 0xe7, 0x51, 0x04, 0xc6, 0xa6, 0xa3, 0xcb,
	0x5f, 0x60, 0xb6, 0xdb, 0x73, 0x61, 0x5a, 0xc9, 0xee, 0x21, 0x56, 0x5d, 0x16, 0xdd, 0x45, 0xeb,
	0xc5, 0xd3, 0x55, 0x71, 0x6e, 0xef, 0xf6, 0xaf, 0x4d, 0x63, 0xa5, 0x73, 0x9c, 0x42, 0xc6, 0x60,
	0xd2, 0x69, 0x69, 0xb2, 0x98, 0x4a, 0x4b, 0x1e, 0x74, 0xfe, 0x00, 0xe9, 0xa5, 0xc4, 0x6e, 0x60,
	0x26, 0x46, 0x49, 0x8b, 0x92, 0xf5, 0xf2, 0x2d, 0x5e, 0x45, 0xfc, 0x0f, 0xe5, 0x0e, 0xd2, 0x8d,
	0xb4, 0x7e, 0x73, 0x14, 0xca, 0x0c, 0xbb, 0x6a, 0x32, 0xa1, 0x97, 0xf2, 0xa0, 0xd9, 0x2d, 0x2c,
	0xbe, 0x85, 0x56, 0xcd, 0xa1, 0x37, 0x5e, 0xe9, 0xf0, 0x9b, 0x84, 0x43, 0x40, 0x1f, 0x03, 0x61,
	0x2b, 0x48, 0x6a, 0x67, 0xb3, 0x84, 0x82, 0x94, 0x0f, 0x72, 0xf8, 0x84, 0xc6, 0xe1, 0x47, 0x28,
	0xaf, 0x4c, 0x9b, 0x4d, 0x28, 0x99, 0x73, 0x20, 0xf4, 0x39, 0x92, 0x7c, 0x0b, 0x8b, 0xad, 0xc4,
	0x77, 0xac, 0x85, 0x57, 0x68, 0xd8, 0x35, 0xcc, 0x35, 0x29, 0xdf, 0x37, 0x32, 0xdc, 0x35, 0xe2,
	0x17, 0x4f, 0xa7, 0x4f, 0x35, 0x9a, 0x76, 0x0c, 0xe3, 0x10, 0xfe, 0x83, 0x6a, 0x1a, 0x5e, 0xee,
	0xf9, 0x37, 0x00, 0x00, 0xff, 0xff, 0x3d, 0x3a, 0x84, 0x61, 0x6e, 0x01, 0x00, 0x00,
}
