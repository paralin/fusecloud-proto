// Code generated by protoc-gen-gogo.
// source: github.com/fuserobotics/proto/consul/consul-service.proto
// DO NOT EDIT!

/*
Package consul is a generated protocol buffer package.

It is generated from these files:
	github.com/fuserobotics/proto/consul/consul-service.proto
	github.com/fuserobotics/proto/consul/consul.proto

It has these top-level messages:
	ListNodesRequest
	ListNodesResponse
	ServiceHealthRequest
	ServiceHealthResponse
	NodeChecksRequest
	NodeChecksResponse
	ConsulNode
	ConsulHealthCheck
	ConsulAgentService
	ConsulServiceHealth
	ConsulQueryMeta
*/
package consul

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import identify "github.com/fuserobotics/proto/identify"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.GoGoProtoPackageIsVersion1

type ListNodesRequest struct {
	Identify *identify.Identify `protobuf:"bytes,1,opt,name=identify" json:"identify,omitempty"`
	Region   string             `protobuf:"bytes,2,opt,name=region,proto3" json:"region,omitempty"`
	Near     string             `protobuf:"bytes,3,opt,name=near,proto3" json:"near,omitempty"`
}

func (m *ListNodesRequest) Reset()                    { *m = ListNodesRequest{} }
func (m *ListNodesRequest) String() string            { return proto.CompactTextString(m) }
func (*ListNodesRequest) ProtoMessage()               {}
func (*ListNodesRequest) Descriptor() ([]byte, []int) { return fileDescriptorConsulService, []int{0} }

func (m *ListNodesRequest) GetIdentify() *identify.Identify {
	if m != nil {
		return m.Identify
	}
	return nil
}

type ListNodesResponse struct {
	Node []*ConsulNode    `protobuf:"bytes,1,rep,name=node" json:"node,omitempty"`
	Meta *ConsulQueryMeta `protobuf:"bytes,2,opt,name=meta" json:"meta,omitempty"`
}

func (m *ListNodesResponse) Reset()                    { *m = ListNodesResponse{} }
func (m *ListNodesResponse) String() string            { return proto.CompactTextString(m) }
func (*ListNodesResponse) ProtoMessage()               {}
func (*ListNodesResponse) Descriptor() ([]byte, []int) { return fileDescriptorConsulService, []int{1} }

func (m *ListNodesResponse) GetNode() []*ConsulNode {
	if m != nil {
		return m.Node
	}
	return nil
}

func (m *ListNodesResponse) GetMeta() *ConsulQueryMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

type ServiceHealthRequest struct {
	Identify    *identify.Identify `protobuf:"bytes,1,opt,name=identify" json:"identify,omitempty"`
	ServiceName string             `protobuf:"bytes,2,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	Region      string             `protobuf:"bytes,3,opt,name=region,proto3" json:"region,omitempty"`
	Tag         string             `protobuf:"bytes,4,opt,name=tag,proto3" json:"tag,omitempty"`
	PassingOnly bool               `protobuf:"varint,5,opt,name=passing_only,json=passingOnly,proto3" json:"passing_only,omitempty"`
}

func (m *ServiceHealthRequest) Reset()         { *m = ServiceHealthRequest{} }
func (m *ServiceHealthRequest) String() string { return proto.CompactTextString(m) }
func (*ServiceHealthRequest) ProtoMessage()    {}
func (*ServiceHealthRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorConsulService, []int{2}
}

func (m *ServiceHealthRequest) GetIdentify() *identify.Identify {
	if m != nil {
		return m.Identify
	}
	return nil
}

type ServiceHealthResponse struct {
	ServiceName string                 `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	Region      string                 `protobuf:"bytes,2,opt,name=region,proto3" json:"region,omitempty"`
	Health      []*ConsulServiceHealth `protobuf:"bytes,3,rep,name=health" json:"health,omitempty"`
	Meta        *ConsulQueryMeta       `protobuf:"bytes,4,opt,name=meta" json:"meta,omitempty"`
}

func (m *ServiceHealthResponse) Reset()         { *m = ServiceHealthResponse{} }
func (m *ServiceHealthResponse) String() string { return proto.CompactTextString(m) }
func (*ServiceHealthResponse) ProtoMessage()    {}
func (*ServiceHealthResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorConsulService, []int{3}
}

func (m *ServiceHealthResponse) GetHealth() []*ConsulServiceHealth {
	if m != nil {
		return m.Health
	}
	return nil
}

func (m *ServiceHealthResponse) GetMeta() *ConsulQueryMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

type NodeChecksRequest struct {
	Identify *identify.Identify `protobuf:"bytes,1,opt,name=identify" json:"identify,omitempty"`
	NodeName string             `protobuf:"bytes,2,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	Region   string             `protobuf:"bytes,3,opt,name=region,proto3" json:"region,omitempty"`
}

func (m *NodeChecksRequest) Reset()                    { *m = NodeChecksRequest{} }
func (m *NodeChecksRequest) String() string            { return proto.CompactTextString(m) }
func (*NodeChecksRequest) ProtoMessage()               {}
func (*NodeChecksRequest) Descriptor() ([]byte, []int) { return fileDescriptorConsulService, []int{4} }

func (m *NodeChecksRequest) GetIdentify() *identify.Identify {
	if m != nil {
		return m.Identify
	}
	return nil
}

type NodeChecksResponse struct {
	NodeName string               `protobuf:"bytes,1,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	Region   string               `protobuf:"bytes,2,opt,name=region,proto3" json:"region,omitempty"`
	Health   []*ConsulHealthCheck `protobuf:"bytes,3,rep,name=health" json:"health,omitempty"`
	Meta     *ConsulQueryMeta     `protobuf:"bytes,4,opt,name=meta" json:"meta,omitempty"`
}

func (m *NodeChecksResponse) Reset()                    { *m = NodeChecksResponse{} }
func (m *NodeChecksResponse) String() string            { return proto.CompactTextString(m) }
func (*NodeChecksResponse) ProtoMessage()               {}
func (*NodeChecksResponse) Descriptor() ([]byte, []int) { return fileDescriptorConsulService, []int{5} }

func (m *NodeChecksResponse) GetHealth() []*ConsulHealthCheck {
	if m != nil {
		return m.Health
	}
	return nil
}

func (m *NodeChecksResponse) GetMeta() *ConsulQueryMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func init() {
	proto.RegisterType((*ListNodesRequest)(nil), "consul.ListNodesRequest")
	proto.RegisterType((*ListNodesResponse)(nil), "consul.ListNodesResponse")
	proto.RegisterType((*ServiceHealthRequest)(nil), "consul.ServiceHealthRequest")
	proto.RegisterType((*ServiceHealthResponse)(nil), "consul.ServiceHealthResponse")
	proto.RegisterType((*NodeChecksRequest)(nil), "consul.NodeChecksRequest")
	proto.RegisterType((*NodeChecksResponse)(nil), "consul.NodeChecksResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for ConsulService service

type ConsulServiceClient interface {
	// Devices are called nodes in Consul
	ListNodes(ctx context.Context, in *ListNodesRequest, opts ...grpc.CallOption) (*ListNodesResponse, error)
	ServiceHealth(ctx context.Context, in *ServiceHealthRequest, opts ...grpc.CallOption) (*ServiceHealthResponse, error)
	NodeChecks(ctx context.Context, in *NodeChecksRequest, opts ...grpc.CallOption) (*NodeChecksResponse, error)
}

type consulServiceClient struct {
	cc *grpc.ClientConn
}

func NewConsulServiceClient(cc *grpc.ClientConn) ConsulServiceClient {
	return &consulServiceClient{cc}
}

func (c *consulServiceClient) ListNodes(ctx context.Context, in *ListNodesRequest, opts ...grpc.CallOption) (*ListNodesResponse, error) {
	out := new(ListNodesResponse)
	err := grpc.Invoke(ctx, "/consul.ConsulService/ListNodes", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consulServiceClient) ServiceHealth(ctx context.Context, in *ServiceHealthRequest, opts ...grpc.CallOption) (*ServiceHealthResponse, error) {
	out := new(ServiceHealthResponse)
	err := grpc.Invoke(ctx, "/consul.ConsulService/ServiceHealth", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consulServiceClient) NodeChecks(ctx context.Context, in *NodeChecksRequest, opts ...grpc.CallOption) (*NodeChecksResponse, error) {
	out := new(NodeChecksResponse)
	err := grpc.Invoke(ctx, "/consul.ConsulService/NodeChecks", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ConsulService service

type ConsulServiceServer interface {
	// Devices are called nodes in Consul
	ListNodes(context.Context, *ListNodesRequest) (*ListNodesResponse, error)
	ServiceHealth(context.Context, *ServiceHealthRequest) (*ServiceHealthResponse, error)
	NodeChecks(context.Context, *NodeChecksRequest) (*NodeChecksResponse, error)
}

func RegisterConsulServiceServer(s *grpc.Server, srv ConsulServiceServer) {
	s.RegisterService(&_ConsulService_serviceDesc, srv)
}

func _ConsulService_ListNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsulServiceServer).ListNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/consul.ConsulService/ListNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsulServiceServer).ListNodes(ctx, req.(*ListNodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsulService_ServiceHealth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceHealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsulServiceServer).ServiceHealth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/consul.ConsulService/ServiceHealth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsulServiceServer).ServiceHealth(ctx, req.(*ServiceHealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsulService_NodeChecks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeChecksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsulServiceServer).NodeChecks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/consul.ConsulService/NodeChecks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsulServiceServer).NodeChecks(ctx, req.(*NodeChecksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ConsulService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "consul.ConsulService",
	HandlerType: (*ConsulServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListNodes",
			Handler:    _ConsulService_ListNodes_Handler,
		},
		{
			MethodName: "ServiceHealth",
			Handler:    _ConsulService_ServiceHealth_Handler,
		},
		{
			MethodName: "NodeChecks",
			Handler:    _ConsulService_NodeChecks_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptorConsulService,
}

var fileDescriptorConsulService = []byte{
	// 464 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x9c, 0x94, 0xcf, 0x8e, 0xd3, 0x30,
	0x10, 0xc6, 0x65, 0x12, 0xa2, 0x76, 0xc2, 0x4a, 0xbb, 0x16, 0x7f, 0xb2, 0x59, 0x90, 0x20, 0x07,
	0x84, 0x84, 0x48, 0xb5, 0x5d, 0x71, 0xe0, 0x86, 0xd4, 0x0b, 0x48, 0xcb, 0x22, 0xc2, 0x03, 0x54,
	0x69, 0xea, 0x26, 0x16, 0xad, 0x5d, 0x62, 0x07, 0xd1, 0x47, 0xe2, 0x8e, 0x78, 0x22, 0x1e, 0x04,
	0xc7, 0x71, 0x43, 0x1c, 0xda, 0x8a, 0xed, 0x29, 0xee, 0x37, 0xdf, 0xcc, 0x78, 0x7e, 0x93, 0x14,
	0xde, 0xe4, 0x54, 0x16, 0xd5, 0x2c, 0xce, 0xf8, 0x6a, 0xb4, 0xa8, 0x04, 0x29, 0xf9, 0x8c, 0x4b,
	0x9a, 0x89, 0xd1, 0xba, 0xe4, 0x92, 0x8f, 0x32, 0xce, 0x44, 0xb5, 0x34, 0x8f, 0x57, 0x2a, 0xfc,
	0x8d, 0x66, 0x24, 0xd6, 0x31, 0xec, 0x35, 0x6a, 0x78, 0x79, 0x8b, 0x12, 0x4d, 0x6a, 0xf8, 0xfa,
	0x70, 0x0a, 0x9d, 0x13, 0x26, 0xe9, 0x62, 0xd3, 0x1e, 0x9a, 0xb4, 0x88, 0xc1, 0xe9, 0x35, 0x15,
	0xf2, 0x86, 0xcf, 0x89, 0x48, 0xc8, 0xd7, 0x8a, 0x08, 0x89, 0x63, 0x18, 0x6c, 0x5d, 0x01, 0x7a,
	0x8a, 0x5e, 0xf8, 0x63, 0x1c, 0xb7, 0x69, 0xef, 0xcd, 0x21, 0x69, 0x3d, 0xf8, 0x21, 0x78, 0x25,
	0xc9, 0x29, 0x67, 0xc1, 0x1d, 0xe5, 0x1e, 0x26, 0xe6, 0x17, 0xc6, 0xe0, 0x32, 0x92, 0x96, 0x81,
	0xa3, 0x55, 0x7d, 0x8e, 0x0a, 0x38, 0xeb, 0xf4, 0x13, 0x6b, 0x35, 0x02, 0xc1, 0xcf, 0x95, 0x51,
	0x09, 0xaa, 0x99, 0xa3, 0x9b, 0x99, 0xc1, 0x26, 0xfa, 0x51, 0x5b, 0x13, 0x1d, 0xc7, 0x2f, 0xc1,
	0x5d, 0x11, 0x99, 0xea, 0x36, 0xfe, 0xf8, 0x91, 0xed, 0xfb, 0x54, 0x91, 0x72, 0xf3, 0x41, 0x85,
	0x13, 0x6d, 0x8a, 0x7e, 0x21, 0xb8, 0xff, 0xb9, 0xa1, 0xfb, 0x8e, 0xa4, 0x4b, 0x59, 0x1c, 0x3b,
	0xde, 0x33, 0xb8, 0x67, 0xb6, 0x34, 0x65, 0xe9, 0x8a, 0x98, 0x21, 0x7d, 0xa3, 0xdd, 0x28, 0xa9,
	0x43, 0xc0, 0xb1, 0x08, 0x9c, 0x82, 0x23, 0xd3, 0x3c, 0x70, 0xb5, 0x58, 0x1f, 0xeb, 0x62, 0xeb,
	0x54, 0x08, 0xca, 0xf2, 0x29, 0x67, 0xcb, 0x4d, 0x70, 0x57, 0x85, 0x06, 0x89, 0x6f, 0xb4, 0x8f,
	0x4a, 0x8a, 0x7e, 0x22, 0x78, 0xd0, 0xbb, 0xb8, 0xe1, 0xd4, 0xbf, 0x09, 0x3a, 0x74, 0x13, 0x7b,
	0x17, 0x57, 0xe0, 0x15, 0xba, 0x98, 0xba, 0x61, 0x0d, 0xf9, 0xc2, 0x86, 0x67, 0xf7, 0x33, 0xd6,
	0x96, 0xb7, 0xfb, 0x3f, 0xbc, 0xbf, 0xc3, 0x59, 0xbd, 0xaa, 0x49, 0x41, 0xb2, 0x2f, 0x47, 0xbf,
	0x4a, 0x17, 0x30, 0xac, 0x37, 0xdd, 0x05, 0x3d, 0xa8, 0x85, 0x43, 0x94, 0xa3, 0x1f, 0x08, 0x70,
	0xb7, 0xb5, 0xa1, 0x65, 0xd5, 0x42, 0x7b, 0x6b, 0xd9, 0x9c, 0x2e, 0x7b, 0x9c, 0xce, 0xed, 0xa1,
	0x1b, 0x40, 0xba, 0xd1, 0x51, 0x94, 0xc6, 0xbf, 0x11, 0x9c, 0x58, 0xc8, 0xf1, 0x5b, 0x18, 0xb6,
	0x5f, 0x04, 0x0e, 0xb6, 0xd9, 0xfd, 0x8f, 0x32, 0x3c, 0xdf, 0x11, 0x31, 0x83, 0x5e, 0xc3, 0x89,
	0xb5, 0x3f, 0xfc, 0x78, 0xeb, 0xdd, 0xf5, 0xfe, 0x87, 0x4f, 0xf6, 0x44, 0x4d, 0xb5, 0x09, 0xc0,
	0x5f, 0x98, 0xb8, 0x6d, 0xfb, 0xcf, 0x6e, 0xc3, 0x70, 0x57, 0xa8, 0x29, 0x32, 0xf3, 0xf4, 0xbf,
	0xcb, 0xd5, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xb3, 0x28, 0xb5, 0xe1, 0x0c, 0x05, 0x00, 0x00,
}
