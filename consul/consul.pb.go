// Code generated by protoc-gen-gogo.
// source: github.com/fuserobotics/proto/consul/consul.proto
// DO NOT EDIT!

package consul

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import common "github.com/fuserobotics/proto/common"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ConsulNode struct {
	Name    string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Address *common.IPAddress `protobuf:"bytes,2,opt,name=address" json:"address,omitempty"`
}

func (m *ConsulNode) Reset()                    { *m = ConsulNode{} }
func (m *ConsulNode) String() string            { return proto.CompactTextString(m) }
func (*ConsulNode) ProtoMessage()               {}
func (*ConsulNode) Descriptor() ([]byte, []int) { return fileDescriptorConsul, []int{0} }

func (m *ConsulNode) GetAddress() *common.IPAddress {
	if m != nil {
		return m.Address
	}
	return nil
}

type ConsulHealthCheck struct {
	Node        string `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`
	CheckId     string `protobuf:"bytes,2,opt,name=check_id,json=checkId,proto3" json:"check_id,omitempty"`
	Name        string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Status      string `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	Notes       string `protobuf:"bytes,5,opt,name=notes,proto3" json:"notes,omitempty"`
	Output      string `protobuf:"bytes,6,opt,name=output,proto3" json:"output,omitempty"`
	ServiceId   string `protobuf:"bytes,7,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	ServiceName string `protobuf:"bytes,8,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
}

func (m *ConsulHealthCheck) Reset()                    { *m = ConsulHealthCheck{} }
func (m *ConsulHealthCheck) String() string            { return proto.CompactTextString(m) }
func (*ConsulHealthCheck) ProtoMessage()               {}
func (*ConsulHealthCheck) Descriptor() ([]byte, []int) { return fileDescriptorConsul, []int{1} }

type ConsulAgentService struct {
	Id                string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ServiceName       string   `protobuf:"bytes,2,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	Tags              []string `protobuf:"bytes,3,rep,name=tags" json:"tags,omitempty"`
	Port              uint32   `protobuf:"varint,4,opt,name=port,proto3" json:"port,omitempty"`
	Address           string   `protobuf:"bytes,5,opt,name=address,proto3" json:"address,omitempty"`
	EnableTagOverride bool     `protobuf:"varint,6,opt,name=enable_tag_override,json=enableTagOverride,proto3" json:"enable_tag_override,omitempty"`
}

func (m *ConsulAgentService) Reset()                    { *m = ConsulAgentService{} }
func (m *ConsulAgentService) String() string            { return proto.CompactTextString(m) }
func (*ConsulAgentService) ProtoMessage()               {}
func (*ConsulAgentService) Descriptor() ([]byte, []int) { return fileDescriptorConsul, []int{2} }

type ConsulServiceHealth struct {
	Node   *ConsulNode          `protobuf:"bytes,1,opt,name=node" json:"node,omitempty"`
	Checks []*ConsulHealthCheck `protobuf:"bytes,2,rep,name=checks" json:"checks,omitempty"`
	Svc    *ConsulAgentService  `protobuf:"bytes,3,opt,name=svc" json:"svc,omitempty"`
}

func (m *ConsulServiceHealth) Reset()                    { *m = ConsulServiceHealth{} }
func (m *ConsulServiceHealth) String() string            { return proto.CompactTextString(m) }
func (*ConsulServiceHealth) ProtoMessage()               {}
func (*ConsulServiceHealth) Descriptor() ([]byte, []int) { return fileDescriptorConsul, []int{3} }

func (m *ConsulServiceHealth) GetNode() *ConsulNode {
	if m != nil {
		return m.Node
	}
	return nil
}

func (m *ConsulServiceHealth) GetChecks() []*ConsulHealthCheck {
	if m != nil {
		return m.Checks
	}
	return nil
}

func (m *ConsulServiceHealth) GetSvc() *ConsulAgentService {
	if m != nil {
		return m.Svc
	}
	return nil
}

type ConsulQueryMeta struct {
	LastIndex   uint64 `protobuf:"varint,1,opt,name=last_index,json=lastIndex,proto3" json:"last_index,omitempty"`
	LastContact int64  `protobuf:"varint,2,opt,name=last_contact,json=lastContact,proto3" json:"last_contact,omitempty"`
	KnownLeader bool   `protobuf:"varint,3,opt,name=known_leader,json=knownLeader,proto3" json:"known_leader,omitempty"`
	RequestTime int64  `protobuf:"varint,4,opt,name=request_time,json=requestTime,proto3" json:"request_time,omitempty"`
}

func (m *ConsulQueryMeta) Reset()                    { *m = ConsulQueryMeta{} }
func (m *ConsulQueryMeta) String() string            { return proto.CompactTextString(m) }
func (*ConsulQueryMeta) ProtoMessage()               {}
func (*ConsulQueryMeta) Descriptor() ([]byte, []int) { return fileDescriptorConsul, []int{4} }

func init() {
	proto.RegisterType((*ConsulNode)(nil), "consul.ConsulNode")
	proto.RegisterType((*ConsulHealthCheck)(nil), "consul.ConsulHealthCheck")
	proto.RegisterType((*ConsulAgentService)(nil), "consul.ConsulAgentService")
	proto.RegisterType((*ConsulServiceHealth)(nil), "consul.ConsulServiceHealth")
	proto.RegisterType((*ConsulQueryMeta)(nil), "consul.ConsulQueryMeta")
}
func (m *ConsulNode) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ConsulNode) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintConsul(data, i, uint64(len(m.Name)))
		i += copy(data[i:], m.Name)
	}
	if m.Address != nil {
		data[i] = 0x12
		i++
		i = encodeVarintConsul(data, i, uint64(m.Address.Size()))
		n1, err := m.Address.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *ConsulHealthCheck) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ConsulHealthCheck) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Node) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintConsul(data, i, uint64(len(m.Node)))
		i += copy(data[i:], m.Node)
	}
	if len(m.CheckId) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintConsul(data, i, uint64(len(m.CheckId)))
		i += copy(data[i:], m.CheckId)
	}
	if len(m.Name) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintConsul(data, i, uint64(len(m.Name)))
		i += copy(data[i:], m.Name)
	}
	if len(m.Status) > 0 {
		data[i] = 0x22
		i++
		i = encodeVarintConsul(data, i, uint64(len(m.Status)))
		i += copy(data[i:], m.Status)
	}
	if len(m.Notes) > 0 {
		data[i] = 0x2a
		i++
		i = encodeVarintConsul(data, i, uint64(len(m.Notes)))
		i += copy(data[i:], m.Notes)
	}
	if len(m.Output) > 0 {
		data[i] = 0x32
		i++
		i = encodeVarintConsul(data, i, uint64(len(m.Output)))
		i += copy(data[i:], m.Output)
	}
	if len(m.ServiceId) > 0 {
		data[i] = 0x3a
		i++
		i = encodeVarintConsul(data, i, uint64(len(m.ServiceId)))
		i += copy(data[i:], m.ServiceId)
	}
	if len(m.ServiceName) > 0 {
		data[i] = 0x42
		i++
		i = encodeVarintConsul(data, i, uint64(len(m.ServiceName)))
		i += copy(data[i:], m.ServiceName)
	}
	return i, nil
}

func (m *ConsulAgentService) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ConsulAgentService) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintConsul(data, i, uint64(len(m.Id)))
		i += copy(data[i:], m.Id)
	}
	if len(m.ServiceName) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintConsul(data, i, uint64(len(m.ServiceName)))
		i += copy(data[i:], m.ServiceName)
	}
	if len(m.Tags) > 0 {
		for _, s := range m.Tags {
			data[i] = 0x1a
			i++
			l = len(s)
			for l >= 1<<7 {
				data[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			data[i] = uint8(l)
			i++
			i += copy(data[i:], s)
		}
	}
	if m.Port != 0 {
		data[i] = 0x20
		i++
		i = encodeVarintConsul(data, i, uint64(m.Port))
	}
	if len(m.Address) > 0 {
		data[i] = 0x2a
		i++
		i = encodeVarintConsul(data, i, uint64(len(m.Address)))
		i += copy(data[i:], m.Address)
	}
	if m.EnableTagOverride {
		data[i] = 0x30
		i++
		if m.EnableTagOverride {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *ConsulServiceHealth) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ConsulServiceHealth) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Node != nil {
		data[i] = 0xa
		i++
		i = encodeVarintConsul(data, i, uint64(m.Node.Size()))
		n2, err := m.Node.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if len(m.Checks) > 0 {
		for _, msg := range m.Checks {
			data[i] = 0x12
			i++
			i = encodeVarintConsul(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Svc != nil {
		data[i] = 0x1a
		i++
		i = encodeVarintConsul(data, i, uint64(m.Svc.Size()))
		n3, err := m.Svc.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func (m *ConsulQueryMeta) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ConsulQueryMeta) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.LastIndex != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintConsul(data, i, uint64(m.LastIndex))
	}
	if m.LastContact != 0 {
		data[i] = 0x10
		i++
		i = encodeVarintConsul(data, i, uint64(m.LastContact))
	}
	if m.KnownLeader {
		data[i] = 0x18
		i++
		if m.KnownLeader {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if m.RequestTime != 0 {
		data[i] = 0x20
		i++
		i = encodeVarintConsul(data, i, uint64(m.RequestTime))
	}
	return i, nil
}

func encodeFixed64Consul(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Consul(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintConsul(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func (m *ConsulNode) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovConsul(uint64(l))
	}
	if m.Address != nil {
		l = m.Address.Size()
		n += 1 + l + sovConsul(uint64(l))
	}
	return n
}

func (m *ConsulHealthCheck) Size() (n int) {
	var l int
	_ = l
	l = len(m.Node)
	if l > 0 {
		n += 1 + l + sovConsul(uint64(l))
	}
	l = len(m.CheckId)
	if l > 0 {
		n += 1 + l + sovConsul(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovConsul(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovConsul(uint64(l))
	}
	l = len(m.Notes)
	if l > 0 {
		n += 1 + l + sovConsul(uint64(l))
	}
	l = len(m.Output)
	if l > 0 {
		n += 1 + l + sovConsul(uint64(l))
	}
	l = len(m.ServiceId)
	if l > 0 {
		n += 1 + l + sovConsul(uint64(l))
	}
	l = len(m.ServiceName)
	if l > 0 {
		n += 1 + l + sovConsul(uint64(l))
	}
	return n
}

func (m *ConsulAgentService) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovConsul(uint64(l))
	}
	l = len(m.ServiceName)
	if l > 0 {
		n += 1 + l + sovConsul(uint64(l))
	}
	if len(m.Tags) > 0 {
		for _, s := range m.Tags {
			l = len(s)
			n += 1 + l + sovConsul(uint64(l))
		}
	}
	if m.Port != 0 {
		n += 1 + sovConsul(uint64(m.Port))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovConsul(uint64(l))
	}
	if m.EnableTagOverride {
		n += 2
	}
	return n
}

func (m *ConsulServiceHealth) Size() (n int) {
	var l int
	_ = l
	if m.Node != nil {
		l = m.Node.Size()
		n += 1 + l + sovConsul(uint64(l))
	}
	if len(m.Checks) > 0 {
		for _, e := range m.Checks {
			l = e.Size()
			n += 1 + l + sovConsul(uint64(l))
		}
	}
	if m.Svc != nil {
		l = m.Svc.Size()
		n += 1 + l + sovConsul(uint64(l))
	}
	return n
}

func (m *ConsulQueryMeta) Size() (n int) {
	var l int
	_ = l
	if m.LastIndex != 0 {
		n += 1 + sovConsul(uint64(m.LastIndex))
	}
	if m.LastContact != 0 {
		n += 1 + sovConsul(uint64(m.LastContact))
	}
	if m.KnownLeader {
		n += 2
	}
	if m.RequestTime != 0 {
		n += 1 + sovConsul(uint64(m.RequestTime))
	}
	return n
}

func sovConsul(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozConsul(x uint64) (n int) {
	return sovConsul(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ConsulNode) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConsul
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConsulNode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConsulNode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsul
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConsul
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsul
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConsul
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Address == nil {
				m.Address = &common.IPAddress{}
			}
			if err := m.Address.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConsul(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthConsul
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConsulHealthCheck) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConsul
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConsulHealthCheck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConsulHealthCheck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Node", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsul
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConsul
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Node = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CheckId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsul
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConsul
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CheckId = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsul
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConsul
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsul
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConsul
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Notes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsul
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConsul
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Notes = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Output", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsul
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConsul
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Output = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsul
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConsul
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceId = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsul
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConsul
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceName = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConsul(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthConsul
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConsulAgentService) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConsul
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConsulAgentService: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConsulAgentService: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsul
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConsul
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsul
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConsul
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceName = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsul
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConsul
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tags = append(m.Tags, string(data[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			m.Port = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsul
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Port |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsul
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConsul
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableTagOverride", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsul
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EnableTagOverride = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipConsul(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthConsul
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConsulServiceHealth) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConsul
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConsulServiceHealth: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConsulServiceHealth: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Node", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsul
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConsul
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Node == nil {
				m.Node = &ConsulNode{}
			}
			if err := m.Node.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Checks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsul
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConsul
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Checks = append(m.Checks, &ConsulHealthCheck{})
			if err := m.Checks[len(m.Checks)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Svc", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsul
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConsul
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Svc == nil {
				m.Svc = &ConsulAgentService{}
			}
			if err := m.Svc.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConsul(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthConsul
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConsulQueryMeta) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConsul
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConsulQueryMeta: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConsulQueryMeta: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastIndex", wireType)
			}
			m.LastIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsul
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.LastIndex |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastContact", wireType)
			}
			m.LastContact = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsul
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.LastContact |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KnownLeader", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsul
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.KnownLeader = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestTime", wireType)
			}
			m.RequestTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsul
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.RequestTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipConsul(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthConsul
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipConsul(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowConsul
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowConsul
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowConsul
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthConsul
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowConsul
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipConsul(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthConsul = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowConsul   = fmt.Errorf("proto: integer overflow")
)

var fileDescriptorConsul = []byte{
	// 531 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x84, 0x53, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0x96, 0xeb, 0xd4, 0x49, 0xd6, 0x05, 0x94, 0x2d, 0x42, 0x6e, 0x24, 0x10, 0xf8, 0x80, 0x90,
	0x00, 0x47, 0x0d, 0x4f, 0x50, 0x72, 0x21, 0x12, 0x2d, 0xb0, 0xf4, 0x6e, 0xad, 0xed, 0xad, 0x63,
	0xd5, 0xf1, 0x06, 0xef, 0x3a, 0xc0, 0xa3, 0x70, 0xe1, 0x3d, 0x78, 0x03, 0x8e, 0x3c, 0x01, 0x42,
	0x3c, 0x09, 0xbb, 0x33, 0x9b, 0xd6, 0x55, 0x0f, 0x1c, 0x22, 0xcf, 0x7c, 0xf3, 0xcd, 0x37, 0x7f,
	0x1b, 0x72, 0x5c, 0x56, 0x7a, 0xd5, 0x65, 0x49, 0x2e, 0xd7, 0xb3, 0x8b, 0x4e, 0x89, 0x56, 0x66,
	0x52, 0x57, 0xb9, 0x9a, 0x6d, 0x5a, 0xa9, 0xe5, 0x2c, 0x97, 0x8d, 0xea, 0x6a, 0xf7, 0x49, 0x00,
	0xa3, 0x01, 0x7a, 0xd3, 0x97, 0xbd, 0xd4, 0x52, 0x96, 0x12, 0x53, 0xb2, 0xee, 0x02, 0x3c, 0xcc,
	0xb7, 0x16, 0xa6, 0x4d, 0xff, 0x5b, 0x69, 0xbd, 0x96, 0x8d, 0xfb, 0x60, 0x4a, 0x7c, 0x4a, 0xc8,
	0x02, 0x6a, 0x9d, 0xc9, 0x42, 0x50, 0x4a, 0x06, 0x0d, 0x5f, 0x8b, 0xc8, 0x7b, 0xec, 0x3d, 0x1b,
	0x33, 0xb0, 0xe9, 0x73, 0x32, 0xe4, 0x45, 0xd1, 0x0a, 0xa5, 0xa2, 0x3d, 0x03, 0x87, 0xf3, 0x49,
	0xe2, 0x14, 0x96, 0xef, 0x4f, 0x30, 0xc0, 0x76, 0x8c, 0xf8, 0xb7, 0x47, 0x26, 0xa8, 0xf7, 0x46,
	0xf0, 0x5a, 0xaf, 0x16, 0x2b, 0x91, 0x5f, 0x82, 0xac, 0x91, 0xbf, 0x92, 0xb5, 0xa5, 0x8e, 0xc8,
	0x28, 0xb7, 0xc1, 0xb4, 0x2a, 0x40, 0x77, 0xcc, 0x86, 0xe0, 0x2f, 0x8b, 0xab, 0x2e, 0xfc, 0x5e,
	0x17, 0x0f, 0x48, 0xa0, 0x34, 0xd7, 0x9d, 0x8a, 0x06, 0x80, 0x3a, 0x8f, 0xde, 0x27, 0xfb, 0x8d,
	0xd4, 0x42, 0x45, 0xfb, 0x00, 0xa3, 0x63, 0xd9, 0xb2, 0xd3, 0x9b, 0x4e, 0x47, 0x01, 0xb2, 0xd1,
	0xa3, 0x0f, 0x09, 0x31, 0x5b, 0xd9, 0x56, 0xb9, 0xb0, 0x65, 0x87, 0x10, 0x1b, 0x3b, 0xc4, 0x14,
	0x7e, 0x42, 0x0e, 0x76, 0x61, 0x68, 0x60, 0x04, 0x84, 0xd0, 0x61, 0x67, 0x06, 0x8a, 0x7f, 0x78,
	0x84, 0xe2, 0x80, 0x27, 0xa5, 0x68, 0xf4, 0x47, 0x0c, 0xd1, 0xbb, 0x64, 0xcf, 0x08, 0xe2, 0x7c,
	0xc6, 0xba, 0xa5, 0xb4, 0x77, 0x4b, 0xc9, 0x4e, 0xa9, 0x79, 0xa9, 0xcc, 0x94, 0xbe, 0x9d, 0xd2,
	0xda, 0x16, 0xdb, 0xc8, 0x56, 0xc3, 0x8c, 0x77, 0x18, 0xd8, 0x34, 0xba, 0xde, 0x3f, 0xce, 0xb8,
	0x73, 0x69, 0x42, 0x0e, 0x45, 0xc3, 0xb3, 0x5a, 0xa4, 0x26, 0x39, 0x95, 0x5b, 0xd1, 0xb6, 0x95,
	0xd9, 0xb2, 0x1d, 0x79, 0xc4, 0x26, 0x18, 0x3a, 0xe7, 0xe5, 0x3b, 0x17, 0x88, 0xbf, 0x7b, 0xe4,
	0x10, 0x7b, 0x77, 0x6d, 0xe3, 0x8d, 0xe8, 0xd3, 0xde, 0x79, 0xc2, 0x39, 0x4d, 0xdc, 0x53, 0xbc,
	0x7e, 0x17, 0xee, 0x64, 0xc7, 0x24, 0x80, 0x13, 0xd9, 0x87, 0xe0, 0x1b, 0xe6, 0xd1, 0x4d, 0x66,
	0xef, 0xe2, 0xcc, 0x11, 0xe9, 0x0b, 0xe2, 0xab, 0x6d, 0x0e, 0x97, 0x0c, 0xe7, 0xd3, 0x9b, 0xfc,
	0xfe, 0x02, 0x99, 0xa5, 0xc5, 0xdf, 0x3c, 0x72, 0x0f, 0x63, 0x1f, 0x3a, 0xd1, 0x7e, 0x3d, 0x15,
	0x9a, 0xdb, 0x93, 0xd5, 0x5c, 0xe9, 0xb4, 0x6a, 0x0a, 0xf1, 0x05, 0x5a, 0x1c, 0xb0, 0xb1, 0x45,
	0x96, 0x16, 0xb0, 0x8b, 0x86, 0xb0, 0x51, 0xd6, 0x3c, 0xd7, 0xb0, 0x68, 0x9f, 0x85, 0x16, 0x5b,
	0x20, 0x64, 0x29, 0x97, 0x8d, 0xfc, 0xdc, 0xa4, 0xb5, 0xe0, 0x85, 0x68, 0xa1, 0x99, 0x11, 0x0b,
	0x01, 0x7b, 0x0b, 0x90, 0xa5, 0xb4, 0xe2, 0x53, 0x27, 0x8c, 0x90, 0xae, 0xcc, 0xb9, 0x06, 0xa8,
	0xe2, 0xb0, 0x73, 0x03, 0xbd, 0x3e, 0xf8, 0xf9, 0xf7, 0x91, 0xf7, 0xcb, 0xfc, 0xfe, 0x98, 0x5f,
	0x16, 0xc0, 0xbf, 0xe7, 0xd5, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x81, 0x79, 0xdf, 0x44, 0xdc,
	0x03, 0x00, 0x00,
}
