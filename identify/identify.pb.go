// Code generated by protoc-gen-gogo.
// source: github.com/fuserobotics/proto/identify/identify.proto
// DO NOT EDIT!

/*
	Package identify is a generated protocol buffer package.

	It is generated from these files:
		github.com/fuserobotics/proto/identify/identify.proto

	It has these top-level messages:
		Identify
*/
package identify

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import common "github.com/fuserobotics/proto/common"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.GoGoProtoPackageIsVersion1

type Identify_SignatureMode int32

const (
	Identify_CONTENTS  Identify_SignatureMode = 0
	Identify_TIMESTAMP Identify_SignatureMode = 1
)

var Identify_SignatureMode_name = map[int32]string{
	0: "CONTENTS",
	1: "TIMESTAMP",
}
var Identify_SignatureMode_value = map[string]int32{
	"CONTENTS":  0,
	"TIMESTAMP": 1,
}

func (x Identify_SignatureMode) String() string {
	return proto.EnumName(Identify_SignatureMode_name, int32(x))
}
func (Identify_SignatureMode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorIdentify, []int{0, 0}
}

//
// A single message to verify identity.
type Identify struct {
	CertChain *common.CertChain      `protobuf:"bytes,1,opt,name=cert_chain,json=certChain" json:"cert_chain,omitempty"`
	Mode      Identify_SignatureMode `protobuf:"varint,2,opt,name=mode,proto3,enum=identify.Identify_SignatureMode" json:"mode,omitempty"`
	Signature []byte                 `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
	Timestamp int32                  `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (m *Identify) Reset()                    { *m = Identify{} }
func (m *Identify) String() string            { return proto.CompactTextString(m) }
func (*Identify) ProtoMessage()               {}
func (*Identify) Descriptor() ([]byte, []int) { return fileDescriptorIdentify, []int{0} }

func (m *Identify) GetCertChain() *common.CertChain {
	if m != nil {
		return m.CertChain
	}
	return nil
}

func init() {
	proto.RegisterType((*Identify)(nil), "identify.Identify")
	proto.RegisterEnum("identify.Identify_SignatureMode", Identify_SignatureMode_name, Identify_SignatureMode_value)
}
func (m *Identify) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Identify) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CertChain != nil {
		data[i] = 0xa
		i++
		i = encodeVarintIdentify(data, i, uint64(m.CertChain.Size()))
		n1, err := m.CertChain.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Mode != 0 {
		data[i] = 0x10
		i++
		i = encodeVarintIdentify(data, i, uint64(m.Mode))
	}
	if len(m.Signature) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintIdentify(data, i, uint64(len(m.Signature)))
		i += copy(data[i:], m.Signature)
	}
	if m.Timestamp != 0 {
		data[i] = 0x20
		i++
		i = encodeVarintIdentify(data, i, uint64(m.Timestamp))
	}
	return i, nil
}

func encodeFixed64Identify(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Identify(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintIdentify(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func (m *Identify) Size() (n int) {
	var l int
	_ = l
	if m.CertChain != nil {
		l = m.CertChain.Size()
		n += 1 + l + sovIdentify(uint64(l))
	}
	if m.Mode != 0 {
		n += 1 + sovIdentify(uint64(m.Mode))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovIdentify(uint64(l))
	}
	if m.Timestamp != 0 {
		n += 1 + sovIdentify(uint64(m.Timestamp))
	}
	return n
}

func sovIdentify(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozIdentify(x uint64) (n int) {
	return sovIdentify(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Identify) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdentify
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Identify: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Identify: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CertChain", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentify
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdentify
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CertChain == nil {
				m.CertChain = &common.CertChain{}
			}
			if err := m.CertChain.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mode", wireType)
			}
			m.Mode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentify
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Mode |= (Identify_SignatureMode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentify
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthIdentify
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], data[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentify
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Timestamp |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipIdentify(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIdentify
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipIdentify(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowIdentify
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIdentify
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIdentify
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthIdentify
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowIdentify
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipIdentify(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthIdentify = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowIdentify   = fmt.Errorf("proto: integer overflow")
)

var fileDescriptorIdentify = []byte{
	// 272 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0x32, 0x4d, 0xcf, 0x2c, 0xc9,
	0x28, 0x4d, 0xd2, 0x4b, 0xce, 0xcf, 0xd5, 0x4f, 0x2b, 0x2d, 0x4e, 0x2d, 0xca, 0x4f, 0xca, 0x2f,
	0xc9, 0x4c, 0x2e, 0xd6, 0x2f, 0x28, 0xca, 0x2f, 0xc9, 0xd7, 0xcf, 0x4c, 0x49, 0xcd, 0x2b, 0xc9,
	0x4c, 0xab, 0x84, 0x33, 0xf4, 0xc0, 0xe2, 0x42, 0x1c, 0x30, 0xbe, 0x94, 0x2e, 0x92, 0x01, 0xe9,
	0xf9, 0xe9, 0xf9, 0x10, 0x8d, 0x49, 0xa5, 0x69, 0x60, 0x1e, 0xc4, 0x14, 0x10, 0x0b, 0xa2, 0x51,
	0xca, 0x10, 0xbf, 0x7d, 0x40, 0xe1, 0xdc, 0xfc, 0x3c, 0x28, 0x05, 0xd1, 0xa2, 0x74, 0x87, 0x91,
	0x8b, 0xc3, 0x13, 0x6a, 0x9d, 0x90, 0x01, 0x17, 0x57, 0x72, 0x6a, 0x51, 0x49, 0x7c, 0x72, 0x46,
	0x62, 0x66, 0x9e, 0x04, 0xa3, 0x02, 0xa3, 0x06, 0xb7, 0x91, 0xa0, 0x1e, 0x54, 0xbd, 0x33, 0x50,
	0xc6, 0x19, 0x24, 0x11, 0xc4, 0x99, 0x0c, 0x63, 0x0a, 0x99, 0x70, 0xb1, 0xe4, 0xe6, 0xa7, 0xa4,
	0x4a, 0x30, 0x01, 0xd5, 0xf2, 0x19, 0x29, 0xe8, 0xc1, 0x7d, 0x02, 0x33, 0x53, 0x2f, 0x38, 0x33,
	0x3d, 0x2f, 0xb1, 0xa4, 0xb4, 0x28, 0xd5, 0x17, 0xa8, 0x2e, 0x08, 0xac, 0x5a, 0x48, 0x86, 0x8b,
	0xb3, 0x18, 0x26, 0x2c, 0xc1, 0x0c, 0xd4, 0xca, 0x13, 0x84, 0x10, 0x00, 0xc9, 0x96, 0x64, 0xe6,
	0xa6, 0x16, 0x97, 0x24, 0xe6, 0x16, 0x48, 0xb0, 0x00, 0x65, 0x59, 0x83, 0x10, 0x02, 0x4a, 0x3a,
	0x5c, 0xbc, 0x28, 0x46, 0x0a, 0xf1, 0x70, 0x71, 0x38, 0xfb, 0xfb, 0x85, 0xb8, 0xfa, 0x85, 0x04,
	0x0b, 0x30, 0x08, 0xf1, 0x72, 0x71, 0x86, 0x78, 0xfa, 0xba, 0x06, 0x87, 0x38, 0xfa, 0x06, 0x08,
	0x30, 0x3a, 0xf1, 0x9c, 0x78, 0x24, 0xc7, 0x78, 0x01, 0x88, 0x1f, 0x00, 0x71, 0x12, 0x1b, 0xd8,
	0xcf, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0xb8, 0x0a, 0xe5, 0x6d, 0x98, 0x01, 0x00, 0x00,
}
