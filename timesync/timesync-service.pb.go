// Code generated by protoc-gen-gogo.
// source: github.com/synrobo/proto/timesync/timesync-service.proto
// DO NOT EDIT!

/*
Package timesync is a generated protocol buffer package.

It is generated from these files:
	github.com/synrobo/proto/timesync/timesync-service.proto

It has these top-level messages:
	GetUnixTimeRequest
	GetUnixTimeResponse
*/
package timesync

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.GoGoProtoPackageIsVersion1

type GetUnixTimeRequest struct {
}

func (m *GetUnixTimeRequest) Reset()         { *m = GetUnixTimeRequest{} }
func (m *GetUnixTimeRequest) String() string { return proto.CompactTextString(m) }
func (*GetUnixTimeRequest) ProtoMessage()    {}
func (*GetUnixTimeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorTimesyncService, []int{0}
}

type GetUnixTimeResponse struct {
	Time uint32 `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
}

func (m *GetUnixTimeResponse) Reset()         { *m = GetUnixTimeResponse{} }
func (m *GetUnixTimeResponse) String() string { return proto.CompactTextString(m) }
func (*GetUnixTimeResponse) ProtoMessage()    {}
func (*GetUnixTimeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorTimesyncService, []int{1}
}

func init() {
	proto.RegisterType((*GetUnixTimeRequest)(nil), "timesync.GetUnixTimeRequest")
	proto.RegisterType((*GetUnixTimeResponse)(nil), "timesync.GetUnixTimeResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for TimeSyncService service

type TimeSyncServiceClient interface {
	GetUnixTime(ctx context.Context, in *GetUnixTimeRequest, opts ...grpc.CallOption) (*GetUnixTimeResponse, error)
}

type timeSyncServiceClient struct {
	cc *grpc.ClientConn
}

func NewTimeSyncServiceClient(cc *grpc.ClientConn) TimeSyncServiceClient {
	return &timeSyncServiceClient{cc}
}

func (c *timeSyncServiceClient) GetUnixTime(ctx context.Context, in *GetUnixTimeRequest, opts ...grpc.CallOption) (*GetUnixTimeResponse, error) {
	out := new(GetUnixTimeResponse)
	err := grpc.Invoke(ctx, "/timesync.TimeSyncService/GetUnixTime", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TimeSyncService service

type TimeSyncServiceServer interface {
	GetUnixTime(context.Context, *GetUnixTimeRequest) (*GetUnixTimeResponse, error)
}

func RegisterTimeSyncServiceServer(s *grpc.Server, srv TimeSyncServiceServer) {
	s.RegisterService(&_TimeSyncService_serviceDesc, srv)
}

func _TimeSyncService_GetUnixTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUnixTimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimeSyncServiceServer).GetUnixTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/timesync.TimeSyncService/GetUnixTime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimeSyncServiceServer).GetUnixTime(ctx, req.(*GetUnixTimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TimeSyncService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "timesync.TimeSyncService",
	HandlerType: (*TimeSyncServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUnixTime",
			Handler:    _TimeSyncService_GetUnixTime_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptorTimesyncService,
}

func (m *GetUnixTimeRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *GetUnixTimeRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *GetUnixTimeResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *GetUnixTimeResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Time != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintTimesyncService(data, i, uint64(m.Time))
	}
	return i, nil
}

func encodeFixed64TimesyncService(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32TimesyncService(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintTimesyncService(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func (m *GetUnixTimeRequest) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *GetUnixTimeResponse) Size() (n int) {
	var l int
	_ = l
	if m.Time != 0 {
		n += 1 + sovTimesyncService(uint64(m.Time))
	}
	return n
}

func sovTimesyncService(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTimesyncService(x uint64) (n int) {
	return sovTimesyncService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GetUnixTimeRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTimesyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUnixTimeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUnixTimeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTimesyncService(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTimesyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUnixTimeResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTimesyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUnixTimeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUnixTimeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTimesyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Time |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTimesyncService(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTimesyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTimesyncService(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTimesyncService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTimesyncService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTimesyncService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTimesyncService
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTimesyncService
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTimesyncService(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTimesyncService = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTimesyncService   = fmt.Errorf("proto: integer overflow")
)

var fileDescriptorTimesyncService = []byte{
	// 192 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xb2, 0x48, 0xcf, 0x2c, 0xc9,
	0x28, 0x4d, 0xd2, 0x4b, 0xce, 0xcf, 0xd5, 0x2f, 0xae, 0xcc, 0x2b, 0xca, 0x4f, 0xca, 0xd7, 0x2f,
	0x28, 0xca, 0x2f, 0xc9, 0xd7, 0x2f, 0xc9, 0xcc, 0x4d, 0x05, 0x8a, 0x24, 0xc3, 0x19, 0xba, 0xc5,
	0xa9, 0x45, 0x65, 0x99, 0xc9, 0xa9, 0x7a, 0x60, 0x79, 0x21, 0x0e, 0x98, 0xb8, 0x94, 0x2e, 0x92,
	0x19, 0xe9, 0xf9, 0xe9, 0x50, 0x03, 0x92, 0x4a, 0xd3, 0xc0, 0x3c, 0x88, 0x69, 0x20, 0x16, 0x44,
	0xa3, 0x92, 0x08, 0x97, 0x90, 0x7b, 0x6a, 0x49, 0x68, 0x5e, 0x66, 0x45, 0x08, 0xd0, 0x84, 0xa0,
	0xd4, 0xc2, 0xd2, 0xd4, 0xe2, 0x12, 0x25, 0x4d, 0x2e, 0x61, 0x14, 0xd1, 0xe2, 0x82, 0xfc, 0xbc,
	0xe2, 0x54, 0x21, 0x21, 0x2e, 0x16, 0x90, 0x3d, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0xbc, 0x41, 0x60,
	0xb6, 0x51, 0x2c, 0x17, 0x3f, 0x48, 0x4d, 0x30, 0xd0, 0xee, 0x60, 0x88, 0x93, 0x84, 0xbc, 0xb8,
	0xb8, 0x91, 0x74, 0x0b, 0xc9, 0xe8, 0xc1, 0x1c, 0xa7, 0x87, 0x69, 0x95, 0x94, 0x2c, 0x0e, 0x59,
	0x88, 0x95, 0x4e, 0x3c, 0x27, 0x1e, 0xc9, 0x31, 0x5e, 0x00, 0xe2, 0x07, 0x40, 0x9c, 0xc4, 0x06,
	0x76, 0xb4, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0xae, 0x9b, 0x30, 0x72, 0x29, 0x01, 0x00, 0x00,
}
