// Code generated by protoc-gen-go.
// source: auth.proto
// DO NOT EDIT!

/*
Package auth is a generated protocol buffer package.

It is generated from these files:
	auth.proto

It has these top-level messages:
	User
	AuthWithPassword
	AuthWithPasswordSuccess
*/
package auth

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

//
// User: a standard user with username, email, password
type User struct {
	Username string             `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
	Password string             `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
	Meta     *User_UserMetadata `protobuf:"bytes,3,opt,name=meta" json:"meta,omitempty"`
	// certificates, latest at index 0
	Cert []*User_UserCert `protobuf:"bytes,4,rep,name=cert" json:"cert,omitempty"`
}

func (m *User) Reset()                    { *m = User{} }
func (m *User) String() string            { return proto.CompactTextString(m) }
func (*User) ProtoMessage()               {}
func (*User) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *User) GetMeta() *User_UserMetadata {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *User) GetCert() []*User_UserCert {
	if m != nil {
		return m.Cert
	}
	return nil
}

type User_UserMetadata struct {
	Name  string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Email string `protobuf:"bytes,2,opt,name=email" json:"email,omitempty"`
}

func (m *User_UserMetadata) Reset()                    { *m = User_UserMetadata{} }
func (m *User_UserMetadata) String() string            { return proto.CompactTextString(m) }
func (*User_UserMetadata) ProtoMessage()               {}
func (*User_UserMetadata) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

type User_UserCert struct {
	Cert string `protobuf:"bytes,1,opt,name=cert" json:"cert,omitempty"`
	Pkey string `protobuf:"bytes,2,opt,name=pkey" json:"pkey,omitempty"`
}

func (m *User_UserCert) Reset()                    { *m = User_UserCert{} }
func (m *User_UserCert) String() string            { return proto.CompactTextString(m) }
func (*User_UserCert) ProtoMessage()               {}
func (*User_UserCert) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 1} }

//
// AuthWithPassword: auth attempt with password
// where sha256() returns lowercase, 64 char hex string
// Password is: sha256(timestamp + sha256(sha256(username) + plaintext password))
type AuthWithPassword struct {
	Username  string `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
	Password  string `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
	Timestamp int64  `protobuf:"varint,3,opt,name=timestamp" json:"timestamp,omitempty"`
}

func (m *AuthWithPassword) Reset()                    { *m = AuthWithPassword{} }
func (m *AuthWithPassword) String() string            { return proto.CompactTextString(m) }
func (*AuthWithPassword) ProtoMessage()               {}
func (*AuthWithPassword) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type AuthWithPasswordSuccess struct {
	Cert *User_UserCert     `protobuf:"bytes,1,opt,name=cert" json:"cert,omitempty"`
	Meta *User_UserMetadata `protobuf:"bytes,2,opt,name=meta" json:"meta,omitempty"`
}

func (m *AuthWithPasswordSuccess) Reset()                    { *m = AuthWithPasswordSuccess{} }
func (m *AuthWithPasswordSuccess) String() string            { return proto.CompactTextString(m) }
func (*AuthWithPasswordSuccess) ProtoMessage()               {}
func (*AuthWithPasswordSuccess) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *AuthWithPasswordSuccess) GetCert() *User_UserCert {
	if m != nil {
		return m.Cert
	}
	return nil
}

func (m *AuthWithPasswordSuccess) GetMeta() *User_UserMetadata {
	if m != nil {
		return m.Meta
	}
	return nil
}

func init() {
	proto.RegisterType((*User)(nil), "auth.User")
	proto.RegisterType((*User_UserMetadata)(nil), "auth.User.UserMetadata")
	proto.RegisterType((*User_UserCert)(nil), "auth.User.UserCert")
	proto.RegisterType((*AuthWithPassword)(nil), "auth.AuthWithPassword")
	proto.RegisterType((*AuthWithPasswordSuccess)(nil), "auth.AuthWithPasswordSuccess")
}

func init() { proto.RegisterFile("auth.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 257 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x9c, 0x51, 0xc1, 0x4a, 0xc4, 0x30,
	0x10, 0xa5, 0x6d, 0x94, 0xdd, 0xd1, 0x83, 0x44, 0x61, 0x4b, 0xf1, 0xb0, 0xf4, 0xa2, 0x20, 0xec,
	0x61, 0xbd, 0x78, 0x15, 0xcf, 0x82, 0x54, 0xc4, 0xf3, 0xd8, 0x1d, 0x68, 0xd1, 0xd8, 0x92, 0x4c,
	0x11, 0xaf, 0x7e, 0xb9, 0xc9, 0x6c, 0x5a, 0x97, 0x05, 0x41, 0xbc, 0x24, 0x33, 0xf3, 0xde, 0x9b,
	0x99, 0xbc, 0x00, 0xe0, 0xc0, 0xcd, 0xaa, 0xb7, 0x1d, 0x77, 0x5a, 0x85, 0xb8, 0xfc, 0x4a, 0x41,
	0x3d, 0x39, 0xb2, 0xba, 0x80, 0xd9, 0xe0, 0xef, 0x77, 0x34, 0x94, 0x27, 0xcb, 0xe4, 0x72, 0x5e,
	0x4d, 0x79, 0xc0, 0x7a, 0x74, 0xee, 0xa3, 0xb3, 0x9b, 0x3c, 0xdd, 0x62, 0x63, 0xae, 0xaf, 0x40,
	0x19, 0x62, 0xcc, 0x33, 0x5f, 0x3f, 0x5a, 0x2f, 0x56, 0x32, 0x21, 0x74, 0x94, 0xe3, 0xde, 0x43,
	0x1b, 0x64, 0xac, 0x84, 0xa4, 0x2f, 0x40, 0xd5, 0x64, 0x39, 0x57, 0xcb, 0xcc, 0x93, 0x4f, 0xf7,
	0xc8, 0x77, 0x1e, 0xaa, 0x84, 0x50, 0xdc, 0xc0, 0xf1, 0xae, 0x5c, 0x6b, 0x50, 0x3b, 0x9b, 0x49,
	0xac, 0xcf, 0xe0, 0x80, 0x0c, 0xb6, 0x6f, 0x71, 0xa5, 0x6d, 0x52, 0xac, 0x61, 0x36, 0xf6, 0x0a,
	0x2a, 0x19, 0x17, 0x55, 0x75, 0xac, 0xf5, 0xaf, 0xf4, 0x19, 0x45, 0x12, 0x97, 0x0d, 0x9c, 0xdc,
	0xfa, 0x4d, 0x9e, 0x5b, 0x6e, 0x1e, 0xc6, 0x77, 0xfd, 0xd7, 0x8f, 0x73, 0x98, 0x73, 0x6b, 0xc8,
	0x31, 0x9a, 0x5e, 0x4c, 0xc9, 0xaa, 0x9f, 0x42, 0xd9, 0xc1, 0x62, 0x7f, 0xd2, 0xe3, 0x50, 0xd7,
	0xe4, 0xdc, 0xe4, 0x4d, 0x22, 0x46, 0xfe, 0xee, 0xcd, 0xe4, 0x78, 0xfa, 0x07, 0xc7, 0x5f, 0x0e,
	0xe5, 0xb3, 0xaf, 0xbf, 0x03, 0x00, 0x00, 0xff, 0xff, 0x64, 0x53, 0x1b, 0xee, 0xfa, 0x01, 0x00,
	0x00,
}
