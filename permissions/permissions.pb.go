// Code generated by protoc-gen-gogo.
// source: github.com/synrobo/proto/permissions/permissions.proto
// DO NOT EDIT!

/*
	Package permissions is a generated protocol buffer package.

	It is generated from these files:
		github.com/synrobo/proto/permissions/permissions.proto

	It has these top-level messages:
		SystemPermissions
*/
package permissions

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "github.com/synrobo/proto/common"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.GoGoProtoPackageIsVersion1

//
// SystemPermissions: full list of possible permissions
type SystemPermissions struct {
	// Create / delete regions
	ManageRegions bool `protobuf:"varint,1,opt,name=manage_regions,json=manageRegions,proto3" json:"manage_regions,omitempty"`
	// Create / delete devices
	ManageDevices bool `protobuf:"varint,2,opt,name=manage_devices,json=manageDevices,proto3" json:"manage_devices,omitempty"`
}

func (m *SystemPermissions) Reset()                    { *m = SystemPermissions{} }
func (m *SystemPermissions) String() string            { return proto.CompactTextString(m) }
func (*SystemPermissions) ProtoMessage()               {}
func (*SystemPermissions) Descriptor() ([]byte, []int) { return fileDescriptorPermissions, []int{0} }

func init() {
	proto.RegisterType((*SystemPermissions)(nil), "permissions.SystemPermissions")
}
func (m *SystemPermissions) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *SystemPermissions) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ManageRegions {
		data[i] = 0x8
		i++
		if m.ManageRegions {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if m.ManageDevices {
		data[i] = 0x10
		i++
		if m.ManageDevices {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	return i, nil
}

func encodeFixed64Permissions(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Permissions(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintPermissions(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func (m *SystemPermissions) Size() (n int) {
	var l int
	_ = l
	if m.ManageRegions {
		n += 2
	}
	if m.ManageDevices {
		n += 2
	}
	return n
}

func sovPermissions(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozPermissions(x uint64) (n int) {
	return sovPermissions(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SystemPermissions) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPermissions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SystemPermissions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SystemPermissions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ManageRegions", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPermissions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ManageRegions = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ManageDevices", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPermissions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ManageDevices = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipPermissions(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPermissions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPermissions(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPermissions
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPermissions
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPermissions
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthPermissions
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowPermissions
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipPermissions(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthPermissions = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPermissions   = fmt.Errorf("proto: integer overflow")
)

var fileDescriptorPermissions = []byte{
	// 177 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0x32, 0x4b, 0xcf, 0x2c, 0xc9,
	0x28, 0x4d, 0xd2, 0x4b, 0xce, 0xcf, 0xd5, 0x2f, 0xae, 0xcc, 0x2b, 0xca, 0x4f, 0xca, 0xd7, 0x2f,
	0x28, 0xca, 0x2f, 0x01, 0x92, 0xa9, 0x45, 0xb9, 0x99, 0xc5, 0xc5, 0x99, 0xf9, 0x79, 0xc5, 0xc8,
	0x6c, 0x3d, 0xb0, 0xac, 0x10, 0x37, 0x92, 0x90, 0x94, 0x2e, 0x92, 0x21, 0xe9, 0xf9, 0xe9, 0x50,
	0x13, 0x92, 0x4a, 0xd3, 0xc0, 0x3c, 0x88, 0x71, 0x20, 0x16, 0x44, 0xaf, 0x94, 0x0e, 0x4e, 0x3b,
	0x81, 0x22, 0xb9, 0xf9, 0x79, 0x50, 0x0a, 0xa2, 0x5a, 0x29, 0x91, 0x4b, 0x30, 0xb8, 0xb2, 0xb8,
	0x24, 0x35, 0x37, 0x00, 0x61, 0xa3, 0x90, 0x2a, 0x17, 0x5f, 0x6e, 0x62, 0x5e, 0x62, 0x7a, 0x6a,
	0x7c, 0x51, 0x6a, 0x3a, 0x48, 0x44, 0x82, 0x51, 0x81, 0x51, 0x83, 0x23, 0x88, 0x17, 0x22, 0x1a,
	0x04, 0x11, 0x44, 0x52, 0x96, 0x92, 0x5a, 0x96, 0x99, 0x9c, 0x5a, 0x2c, 0xc1, 0x84, 0xac, 0xcc,
	0x05, 0x22, 0xe8, 0xc4, 0x73, 0xe2, 0x91, 0x1c, 0xe3, 0x05, 0x20, 0x7e, 0x00, 0xc4, 0x49, 0x6c,
	0x60, 0x7b, 0x8d, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0x4d, 0xd6, 0xb1, 0x7b, 0x1b, 0x01, 0x00,
	0x00,
}
