// Code generated by protoc-gen-gogo.
// source: github.com/synrobo/proto/region/region-service.proto
// DO NOT EDIT!

/*
	Package region is a generated protocol buffer package.

	It is generated from these files:
		github.com/synrobo/proto/region/region-service.proto
		github.com/synrobo/proto/region/region.proto

	It has these top-level messages:
		ListRegionsRequest
		ListRegionsResponse
		CreateRegionRequest
		CreateRegionResponse
		SaveRegionRequest
		SaveRegionResponse
		Region
*/
package region

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import identify "github.com/synrobo/proto/identify"
import common "github.com/synrobo/proto/common"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.GoGoProtoPackageIsVersion1

type ListRegionsRequest struct {
	Identify *identify.Identify `protobuf:"bytes,1,opt,name=identify" json:"identify,omitempty"`
}

func (m *ListRegionsRequest) Reset()                    { *m = ListRegionsRequest{} }
func (m *ListRegionsRequest) String() string            { return proto.CompactTextString(m) }
func (*ListRegionsRequest) ProtoMessage()               {}
func (*ListRegionsRequest) Descriptor() ([]byte, []int) { return fileDescriptorRegionService, []int{0} }

func (m *ListRegionsRequest) GetIdentify() *identify.Identify {
	if m != nil {
		return m.Identify
	}
	return nil
}

type ListRegionsResponse struct {
	Region []*Region `protobuf:"bytes,1,rep,name=region" json:"region,omitempty"`
}

func (m *ListRegionsResponse) Reset()                    { *m = ListRegionsResponse{} }
func (m *ListRegionsResponse) String() string            { return proto.CompactTextString(m) }
func (*ListRegionsResponse) ProtoMessage()               {}
func (*ListRegionsResponse) Descriptor() ([]byte, []int) { return fileDescriptorRegionService, []int{1} }

func (m *ListRegionsResponse) GetRegion() []*Region {
	if m != nil {
		return m.Region
	}
	return nil
}

type CreateRegionRequest struct {
	Region *Region `protobuf:"bytes,1,opt,name=region" json:"region,omitempty"`
}

func (m *CreateRegionRequest) Reset()                    { *m = CreateRegionRequest{} }
func (m *CreateRegionRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateRegionRequest) ProtoMessage()               {}
func (*CreateRegionRequest) Descriptor() ([]byte, []int) { return fileDescriptorRegionService, []int{2} }

func (m *CreateRegionRequest) GetRegion() *Region {
	if m != nil {
		return m.Region
	}
	return nil
}

type CreateRegionResponse struct {
	CreatedRegion *Region `protobuf:"bytes,1,opt,name=created_region,json=createdRegion" json:"created_region,omitempty"`
}

func (m *CreateRegionResponse) Reset()         { *m = CreateRegionResponse{} }
func (m *CreateRegionResponse) String() string { return proto.CompactTextString(m) }
func (*CreateRegionResponse) ProtoMessage()    {}
func (*CreateRegionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorRegionService, []int{3}
}

func (m *CreateRegionResponse) GetCreatedRegion() *Region {
	if m != nil {
		return m.CreatedRegion
	}
	return nil
}

type SaveRegionRequest struct {
	Identify     *identify.Identify           `protobuf:"bytes,1,opt,name=identify" json:"identify,omitempty"`
	Id           string                       `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	Name         string                       `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	DataKeyspace []*Region_RegionDataKeyspace `protobuf:"bytes,5,rep,name=data_keyspace,json=dataKeyspace" json:"data_keyspace,omitempty"`
	Location     *common.GeoLocation          `protobuf:"bytes,6,opt,name=location" json:"location,omitempty"`
	// If set, if data_keyspace is null will delete all of them.
	AllowClearDataKeyspaces bool `protobuf:"varint,7,opt,name=allow_clear_data_keyspaces,json=allowClearDataKeyspaces,proto3" json:"allow_clear_data_keyspaces,omitempty"`
}

func (m *SaveRegionRequest) Reset()                    { *m = SaveRegionRequest{} }
func (m *SaveRegionRequest) String() string            { return proto.CompactTextString(m) }
func (*SaveRegionRequest) ProtoMessage()               {}
func (*SaveRegionRequest) Descriptor() ([]byte, []int) { return fileDescriptorRegionService, []int{4} }

func (m *SaveRegionRequest) GetIdentify() *identify.Identify {
	if m != nil {
		return m.Identify
	}
	return nil
}

func (m *SaveRegionRequest) GetDataKeyspace() []*Region_RegionDataKeyspace {
	if m != nil {
		return m.DataKeyspace
	}
	return nil
}

func (m *SaveRegionRequest) GetLocation() *common.GeoLocation {
	if m != nil {
		return m.Location
	}
	return nil
}

type SaveRegionResponse struct {
	Changed bool `protobuf:"varint,1,opt,name=changed,proto3" json:"changed,omitempty"`
}

func (m *SaveRegionResponse) Reset()                    { *m = SaveRegionResponse{} }
func (m *SaveRegionResponse) String() string            { return proto.CompactTextString(m) }
func (*SaveRegionResponse) ProtoMessage()               {}
func (*SaveRegionResponse) Descriptor() ([]byte, []int) { return fileDescriptorRegionService, []int{5} }

func init() {
	proto.RegisterType((*ListRegionsRequest)(nil), "region.ListRegionsRequest")
	proto.RegisterType((*ListRegionsResponse)(nil), "region.ListRegionsResponse")
	proto.RegisterType((*CreateRegionRequest)(nil), "region.CreateRegionRequest")
	proto.RegisterType((*CreateRegionResponse)(nil), "region.CreateRegionResponse")
	proto.RegisterType((*SaveRegionRequest)(nil), "region.SaveRegionRequest")
	proto.RegisterType((*SaveRegionResponse)(nil), "region.SaveRegionResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for RegionService service

type RegionServiceClient interface {
	ListRegions(ctx context.Context, in *ListRegionsRequest, opts ...grpc.CallOption) (*ListRegionsResponse, error)
	CreateRegion(ctx context.Context, in *CreateRegionRequest, opts ...grpc.CallOption) (*CreateRegionResponse, error)
	SaveRegion(ctx context.Context, in *SaveRegionRequest, opts ...grpc.CallOption) (*SaveRegionResponse, error)
}

type regionServiceClient struct {
	cc *grpc.ClientConn
}

func NewRegionServiceClient(cc *grpc.ClientConn) RegionServiceClient {
	return &regionServiceClient{cc}
}

func (c *regionServiceClient) ListRegions(ctx context.Context, in *ListRegionsRequest, opts ...grpc.CallOption) (*ListRegionsResponse, error) {
	out := new(ListRegionsResponse)
	err := grpc.Invoke(ctx, "/region.RegionService/ListRegions", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *regionServiceClient) CreateRegion(ctx context.Context, in *CreateRegionRequest, opts ...grpc.CallOption) (*CreateRegionResponse, error) {
	out := new(CreateRegionResponse)
	err := grpc.Invoke(ctx, "/region.RegionService/CreateRegion", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *regionServiceClient) SaveRegion(ctx context.Context, in *SaveRegionRequest, opts ...grpc.CallOption) (*SaveRegionResponse, error) {
	out := new(SaveRegionResponse)
	err := grpc.Invoke(ctx, "/region.RegionService/SaveRegion", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RegionService service

type RegionServiceServer interface {
	ListRegions(context.Context, *ListRegionsRequest) (*ListRegionsResponse, error)
	CreateRegion(context.Context, *CreateRegionRequest) (*CreateRegionResponse, error)
	SaveRegion(context.Context, *SaveRegionRequest) (*SaveRegionResponse, error)
}

func RegisterRegionServiceServer(s *grpc.Server, srv RegionServiceServer) {
	s.RegisterService(&_RegionService_serviceDesc, srv)
}

func _RegionService_ListRegions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRegionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegionServiceServer).ListRegions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/region.RegionService/ListRegions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegionServiceServer).ListRegions(ctx, req.(*ListRegionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegionService_CreateRegion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRegionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegionServiceServer).CreateRegion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/region.RegionService/CreateRegion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegionServiceServer).CreateRegion(ctx, req.(*CreateRegionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegionService_SaveRegion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveRegionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegionServiceServer).SaveRegion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/region.RegionService/SaveRegion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegionServiceServer).SaveRegion(ctx, req.(*SaveRegionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RegionService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "region.RegionService",
	HandlerType: (*RegionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListRegions",
			Handler:    _RegionService_ListRegions_Handler,
		},
		{
			MethodName: "CreateRegion",
			Handler:    _RegionService_CreateRegion_Handler,
		},
		{
			MethodName: "SaveRegion",
			Handler:    _RegionService_SaveRegion_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptorRegionService,
}

func (m *ListRegionsRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ListRegionsRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Identify != nil {
		data[i] = 0xa
		i++
		i = encodeVarintRegionService(data, i, uint64(m.Identify.Size()))
		n1, err := m.Identify.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *ListRegionsResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ListRegionsResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Region) > 0 {
		for _, msg := range m.Region {
			data[i] = 0xa
			i++
			i = encodeVarintRegionService(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *CreateRegionRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *CreateRegionRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Region != nil {
		data[i] = 0xa
		i++
		i = encodeVarintRegionService(data, i, uint64(m.Region.Size()))
		n2, err := m.Region.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *CreateRegionResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *CreateRegionResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CreatedRegion != nil {
		data[i] = 0xa
		i++
		i = encodeVarintRegionService(data, i, uint64(m.CreatedRegion.Size()))
		n3, err := m.CreatedRegion.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func (m *SaveRegionRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *SaveRegionRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Identify != nil {
		data[i] = 0xa
		i++
		i = encodeVarintRegionService(data, i, uint64(m.Identify.Size()))
		n4, err := m.Identify.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if len(m.Id) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintRegionService(data, i, uint64(len(m.Id)))
		i += copy(data[i:], m.Id)
	}
	if len(m.Name) > 0 {
		data[i] = 0x22
		i++
		i = encodeVarintRegionService(data, i, uint64(len(m.Name)))
		i += copy(data[i:], m.Name)
	}
	if len(m.DataKeyspace) > 0 {
		for _, msg := range m.DataKeyspace {
			data[i] = 0x2a
			i++
			i = encodeVarintRegionService(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Location != nil {
		data[i] = 0x32
		i++
		i = encodeVarintRegionService(data, i, uint64(m.Location.Size()))
		n5, err := m.Location.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.AllowClearDataKeyspaces {
		data[i] = 0x38
		i++
		if m.AllowClearDataKeyspaces {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *SaveRegionResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *SaveRegionResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Changed {
		data[i] = 0x8
		i++
		if m.Changed {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	return i, nil
}

func encodeFixed64RegionService(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32RegionService(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintRegionService(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func (m *ListRegionsRequest) Size() (n int) {
	var l int
	_ = l
	if m.Identify != nil {
		l = m.Identify.Size()
		n += 1 + l + sovRegionService(uint64(l))
	}
	return n
}

func (m *ListRegionsResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Region) > 0 {
		for _, e := range m.Region {
			l = e.Size()
			n += 1 + l + sovRegionService(uint64(l))
		}
	}
	return n
}

func (m *CreateRegionRequest) Size() (n int) {
	var l int
	_ = l
	if m.Region != nil {
		l = m.Region.Size()
		n += 1 + l + sovRegionService(uint64(l))
	}
	return n
}

func (m *CreateRegionResponse) Size() (n int) {
	var l int
	_ = l
	if m.CreatedRegion != nil {
		l = m.CreatedRegion.Size()
		n += 1 + l + sovRegionService(uint64(l))
	}
	return n
}

func (m *SaveRegionRequest) Size() (n int) {
	var l int
	_ = l
	if m.Identify != nil {
		l = m.Identify.Size()
		n += 1 + l + sovRegionService(uint64(l))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovRegionService(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovRegionService(uint64(l))
	}
	if len(m.DataKeyspace) > 0 {
		for _, e := range m.DataKeyspace {
			l = e.Size()
			n += 1 + l + sovRegionService(uint64(l))
		}
	}
	if m.Location != nil {
		l = m.Location.Size()
		n += 1 + l + sovRegionService(uint64(l))
	}
	if m.AllowClearDataKeyspaces {
		n += 2
	}
	return n
}

func (m *SaveRegionResponse) Size() (n int) {
	var l int
	_ = l
	if m.Changed {
		n += 2
	}
	return n
}

func sovRegionService(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozRegionService(x uint64) (n int) {
	return sovRegionService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ListRegionsRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegionService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListRegionsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListRegionsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identify", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegionService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRegionService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Identify == nil {
				m.Identify = &identify.Identify{}
			}
			if err := m.Identify.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRegionService(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegionService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListRegionsResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegionService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListRegionsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListRegionsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Region", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegionService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRegionService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Region = append(m.Region, &Region{})
			if err := m.Region[len(m.Region)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRegionService(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegionService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateRegionRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegionService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateRegionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateRegionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Region", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegionService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRegionService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Region == nil {
				m.Region = &Region{}
			}
			if err := m.Region.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRegionService(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegionService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateRegionResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegionService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateRegionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateRegionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedRegion", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegionService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRegionService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedRegion == nil {
				m.CreatedRegion = &Region{}
			}
			if err := m.CreatedRegion.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRegionService(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegionService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SaveRegionRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegionService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SaveRegionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SaveRegionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identify", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegionService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRegionService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Identify == nil {
				m.Identify = &identify.Identify{}
			}
			if err := m.Identify.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegionService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegionService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegionService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegionService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataKeyspace", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegionService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRegionService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataKeyspace = append(m.DataKeyspace, &Region_RegionDataKeyspace{})
			if err := m.DataKeyspace[len(m.DataKeyspace)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegionService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRegionService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Location == nil {
				m.Location = &common.GeoLocation{}
			}
			if err := m.Location.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowClearDataKeyspaces", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegionService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AllowClearDataKeyspaces = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipRegionService(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegionService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SaveRegionResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegionService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SaveRegionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SaveRegionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Changed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegionService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Changed = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipRegionService(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegionService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRegionService(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRegionService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRegionService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRegionService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthRegionService
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowRegionService
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipRegionService(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthRegionService = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRegionService   = fmt.Errorf("proto: integer overflow")
)

var fileDescriptorRegionService = []byte{
	// 466 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x94, 0x53, 0xc1, 0x6e, 0xd4, 0x30,
	0x10, 0x55, 0xda, 0xb2, 0x5d, 0xa6, 0xbb, 0x2b, 0xe1, 0x22, 0x11, 0x0c, 0x42, 0xb0, 0x07, 0xc4,
	0x81, 0x26, 0xa8, 0xc0, 0x09, 0x71, 0x61, 0x2b, 0x50, 0x45, 0xb9, 0xb8, 0x1f, 0x10, 0x39, 0x89,
	0x9b, 0x46, 0x64, 0xe3, 0x25, 0xf6, 0x16, 0xed, 0xc7, 0xf0, 0x3f, 0x1c, 0xf9, 0x04, 0xc4, 0x85,
	0xdf, 0xc0, 0xb1, 0x27, 0x21, 0xa1, 0xa1, 0xd0, 0x43, 0xe4, 0xf1, 0xcc, 0x7b, 0xcf, 0xcf, 0x93,
	0x31, 0xbc, 0xc8, 0x72, 0x7d, 0xbe, 0x8e, 0x83, 0x44, 0x2e, 0x43, 0xb5, 0x29, 0x2b, 0x19, 0xcb,
	0x70, 0x55, 0x49, 0x2d, 0xc3, 0x4a, 0x64, 0xb9, 0x2c, 0x71, 0x39, 0x50, 0xa2, 0xba, 0xc8, 0x13,
	0x11, 0xd8, 0x1a, 0x19, 0xb9, 0x2c, 0x3d, 0xe8, 0xb0, 0x33, 0x99, 0x21, 0x35, 0x5e, 0x9f, 0xd9,
	0x9d, 0xd3, 0xa9, 0x23, 0x47, 0xa3, 0xcf, 0xfe, 0x7a, 0x58, 0x9e, 0x8a, 0x52, 0xe7, 0x67, 0x9b,
	0x36, 0x40, 0xc6, 0xd3, 0xff, 0xb3, 0xf7, 0x4f, 0xb4, 0xc9, 0x2c, 0x0d, 0xda, 0x2d, 0x0e, 0x3d,
	0x3f, 0x02, 0x72, 0x92, 0x2b, 0xcd, 0xac, 0x82, 0x62, 0xe2, 0xd3, 0x5a, 0x28, 0x4d, 0x02, 0x18,
	0x37, 0x1e, 0x7c, 0xef, 0xa1, 0xf7, 0x64, 0xef, 0x90, 0x04, 0xad, 0xa9, 0x63, 0x0c, 0x58, 0x8b,
	0x99, 0xbf, 0x86, 0xfd, 0x9e, 0x8a, 0x5a, 0x99, 0x45, 0x90, 0xc7, 0x80, 0x3d, 0x32, 0x22, 0xdb,
	0x46, 0x64, 0x16, 0xa0, 0x53, 0x07, 0x64, 0x58, 0xad, 0xe9, 0x8b, 0x4a, 0x70, 0x2d, 0x30, 0x8f,
	0x2e, 0xba, 0x74, 0xef, 0x0a, 0xfa, 0x07, 0xb8, 0xdd, 0xa7, 0xe3, 0xf1, 0x2f, 0x61, 0x96, 0xd8,
	0x7c, 0x1a, 0x5d, 0xa9, 0x33, 0x45, 0x94, 0xdb, 0xce, 0xbf, 0x6c, 0xc1, 0xad, 0x53, 0x7e, 0xf1,
	0x87, 0x99, 0x6b, 0xb6, 0x84, 0xcc, 0x60, 0x2b, 0x4f, 0xfd, 0x6d, 0x83, 0xbc, 0xc9, 0x4c, 0x44,
	0x08, 0xec, 0x94, 0x7c, 0x29, 0xfc, 0x1d, 0x9b, 0xb1, 0x31, 0x79, 0x0b, 0xd3, 0x94, 0x6b, 0x1e,
	0x7d, 0x14, 0x1b, 0xb5, 0xe2, 0x89, 0xf0, 0x6f, 0xd8, 0x36, 0x3d, 0xea, 0xfb, 0xc3, 0xe5, 0xc8,
	0x20, 0xdf, 0x23, 0x90, 0x4d, 0xd2, 0xce, 0x8e, 0x84, 0x30, 0x2e, 0x64, 0xc2, 0x75, 0x7d, 0xc5,
	0x91, 0xf5, 0xb6, 0x1f, 0xe0, 0x5f, 0x7e, 0x27, 0xe4, 0x09, 0x96, 0x58, 0x0b, 0x22, 0xaf, 0x80,
	0xf2, 0xa2, 0x90, 0x9f, 0xa3, 0xa4, 0x10, 0xbc, 0x8a, 0x7a, 0x26, 0x94, 0xbf, 0x6b, 0x24, 0xc6,
	0xec, 0x8e, 0x45, 0x2c, 0x6a, 0x40, 0xf7, 0x68, 0x35, 0x0f, 0x80, 0x74, 0xdb, 0x83, 0xcd, 0xf6,
	0x61, 0x37, 0x39, 0xe7, 0x65, 0x26, 0x52, 0xdb, 0x9e, 0x31, 0x6b, 0xb6, 0x87, 0x3f, 0x3d, 0x98,
	0x3a, 0xf0, 0xa9, 0x7b, 0x3f, 0xe6, 0xde, 0x7b, 0x9d, 0x71, 0x21, 0xb4, 0xb9, 0xef, 0xe5, 0x49,
	0xa4, 0xf7, 0x06, 0x6b, 0x78, 0xe6, 0x31, 0x4c, 0xba, 0x3f, 0x9e, 0xb4, 0xe0, 0x81, 0x69, 0xa2,
	0xf7, 0x87, 0x8b, 0x28, 0xb5, 0x00, 0xf8, 0x7d, 0x29, 0x72, 0xb7, 0xc1, 0x5e, 0x9a, 0x03, 0x4a,
	0x87, 0x4a, 0x4e, 0xe4, 0xcd, 0xe4, 0xeb, 0x8f, 0x07, 0xde, 0x37, 0xf3, 0x7d, 0x37, 0x5f, 0x3c,
	0xb2, 0x2f, 0xec, 0xf9, 0xaf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xcf, 0xc3, 0x71, 0xda, 0x5e, 0x04,
	0x00, 0x00,
}
