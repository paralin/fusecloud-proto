// Code generated by protoc-gen-gogo.
// source: github.com/fuserobotics/proto/region/region-service.proto
// DO NOT EDIT!

/*
Package region is a generated protocol buffer package.

It is generated from these files:
	github.com/fuserobotics/proto/region/region-service.proto
	github.com/fuserobotics/proto/region/region.proto

It has these top-level messages:
	ListRegionsRequest
	ListRegionsResponse
	CreateRegionRequest
	CreateRegionResponse
	SaveRegionRequest
	SaveRegionResponse
	Region
	RegionDataTable
*/
package region

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import identify "github.com/fuserobotics/proto/identify"
import common "github.com/fuserobotics/proto/common"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.GoGoProtoPackageIsVersion1

type ListRegionsRequest struct {
	Identify *identify.Identify `protobuf:"bytes,1,opt,name=identify" json:"identify,omitempty"`
}

func (m *ListRegionsRequest) Reset()                    { *m = ListRegionsRequest{} }
func (m *ListRegionsRequest) String() string            { return proto.CompactTextString(m) }
func (*ListRegionsRequest) ProtoMessage()               {}
func (*ListRegionsRequest) Descriptor() ([]byte, []int) { return fileDescriptorRegionService, []int{0} }

func (m *ListRegionsRequest) GetIdentify() *identify.Identify {
	if m != nil {
		return m.Identify
	}
	return nil
}

type ListRegionsResponse struct {
	Region []*Region `protobuf:"bytes,1,rep,name=region" json:"region,omitempty"`
}

func (m *ListRegionsResponse) Reset()                    { *m = ListRegionsResponse{} }
func (m *ListRegionsResponse) String() string            { return proto.CompactTextString(m) }
func (*ListRegionsResponse) ProtoMessage()               {}
func (*ListRegionsResponse) Descriptor() ([]byte, []int) { return fileDescriptorRegionService, []int{1} }

func (m *ListRegionsResponse) GetRegion() []*Region {
	if m != nil {
		return m.Region
	}
	return nil
}

type CreateRegionRequest struct {
	Region *Region `protobuf:"bytes,1,opt,name=region" json:"region,omitempty"`
}

func (m *CreateRegionRequest) Reset()                    { *m = CreateRegionRequest{} }
func (m *CreateRegionRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateRegionRequest) ProtoMessage()               {}
func (*CreateRegionRequest) Descriptor() ([]byte, []int) { return fileDescriptorRegionService, []int{2} }

func (m *CreateRegionRequest) GetRegion() *Region {
	if m != nil {
		return m.Region
	}
	return nil
}

type CreateRegionResponse struct {
	CreatedRegion *Region `protobuf:"bytes,1,opt,name=created_region,json=createdRegion" json:"created_region,omitempty"`
}

func (m *CreateRegionResponse) Reset()         { *m = CreateRegionResponse{} }
func (m *CreateRegionResponse) String() string { return proto.CompactTextString(m) }
func (*CreateRegionResponse) ProtoMessage()    {}
func (*CreateRegionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorRegionService, []int{3}
}

func (m *CreateRegionResponse) GetCreatedRegion() *Region {
	if m != nil {
		return m.CreatedRegion
	}
	return nil
}

type SaveRegionRequest struct {
	Identify *identify.Identify  `protobuf:"bytes,1,opt,name=identify" json:"identify,omitempty"`
	Id       string              `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	Name     string              `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Location *common.GeoLocation `protobuf:"bytes,6,opt,name=location" json:"location,omitempty"`
}

func (m *SaveRegionRequest) Reset()                    { *m = SaveRegionRequest{} }
func (m *SaveRegionRequest) String() string            { return proto.CompactTextString(m) }
func (*SaveRegionRequest) ProtoMessage()               {}
func (*SaveRegionRequest) Descriptor() ([]byte, []int) { return fileDescriptorRegionService, []int{4} }

func (m *SaveRegionRequest) GetIdentify() *identify.Identify {
	if m != nil {
		return m.Identify
	}
	return nil
}

func (m *SaveRegionRequest) GetLocation() *common.GeoLocation {
	if m != nil {
		return m.Location
	}
	return nil
}

type SaveRegionResponse struct {
	Changed bool `protobuf:"varint,1,opt,name=changed,proto3" json:"changed,omitempty"`
}

func (m *SaveRegionResponse) Reset()                    { *m = SaveRegionResponse{} }
func (m *SaveRegionResponse) String() string            { return proto.CompactTextString(m) }
func (*SaveRegionResponse) ProtoMessage()               {}
func (*SaveRegionResponse) Descriptor() ([]byte, []int) { return fileDescriptorRegionService, []int{5} }

func init() {
	proto.RegisterType((*ListRegionsRequest)(nil), "region.ListRegionsRequest")
	proto.RegisterType((*ListRegionsResponse)(nil), "region.ListRegionsResponse")
	proto.RegisterType((*CreateRegionRequest)(nil), "region.CreateRegionRequest")
	proto.RegisterType((*CreateRegionResponse)(nil), "region.CreateRegionResponse")
	proto.RegisterType((*SaveRegionRequest)(nil), "region.SaveRegionRequest")
	proto.RegisterType((*SaveRegionResponse)(nil), "region.SaveRegionResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for RegionService service

type RegionServiceClient interface {
	ListRegions(ctx context.Context, in *ListRegionsRequest, opts ...grpc.CallOption) (*ListRegionsResponse, error)
	CreateRegion(ctx context.Context, in *CreateRegionRequest, opts ...grpc.CallOption) (*CreateRegionResponse, error)
	SaveRegion(ctx context.Context, in *SaveRegionRequest, opts ...grpc.CallOption) (*SaveRegionResponse, error)
}

type regionServiceClient struct {
	cc *grpc.ClientConn
}

func NewRegionServiceClient(cc *grpc.ClientConn) RegionServiceClient {
	return &regionServiceClient{cc}
}

func (c *regionServiceClient) ListRegions(ctx context.Context, in *ListRegionsRequest, opts ...grpc.CallOption) (*ListRegionsResponse, error) {
	out := new(ListRegionsResponse)
	err := grpc.Invoke(ctx, "/region.RegionService/ListRegions", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *regionServiceClient) CreateRegion(ctx context.Context, in *CreateRegionRequest, opts ...grpc.CallOption) (*CreateRegionResponse, error) {
	out := new(CreateRegionResponse)
	err := grpc.Invoke(ctx, "/region.RegionService/CreateRegion", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *regionServiceClient) SaveRegion(ctx context.Context, in *SaveRegionRequest, opts ...grpc.CallOption) (*SaveRegionResponse, error) {
	out := new(SaveRegionResponse)
	err := grpc.Invoke(ctx, "/region.RegionService/SaveRegion", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RegionService service

type RegionServiceServer interface {
	ListRegions(context.Context, *ListRegionsRequest) (*ListRegionsResponse, error)
	CreateRegion(context.Context, *CreateRegionRequest) (*CreateRegionResponse, error)
	SaveRegion(context.Context, *SaveRegionRequest) (*SaveRegionResponse, error)
}

func RegisterRegionServiceServer(s *grpc.Server, srv RegionServiceServer) {
	s.RegisterService(&_RegionService_serviceDesc, srv)
}

func _RegionService_ListRegions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRegionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegionServiceServer).ListRegions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/region.RegionService/ListRegions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegionServiceServer).ListRegions(ctx, req.(*ListRegionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegionService_CreateRegion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRegionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegionServiceServer).CreateRegion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/region.RegionService/CreateRegion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegionServiceServer).CreateRegion(ctx, req.(*CreateRegionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegionService_SaveRegion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveRegionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegionServiceServer).SaveRegion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/region.RegionService/SaveRegion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegionServiceServer).SaveRegion(ctx, req.(*SaveRegionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RegionService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "region.RegionService",
	HandlerType: (*RegionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListRegions",
			Handler:    _RegionService_ListRegions_Handler,
		},
		{
			MethodName: "CreateRegion",
			Handler:    _RegionService_CreateRegion_Handler,
		},
		{
			MethodName: "SaveRegion",
			Handler:    _RegionService_SaveRegion_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptorRegionService,
}

var fileDescriptorRegionService = []byte{
	// 370 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x94, 0x52, 0xcf, 0x4e, 0xf2, 0x40,
	0x10, 0x4f, 0x3f, 0x08, 0x1f, 0x0e, 0x42, 0xe2, 0xe0, 0xa1, 0x56, 0x0f, 0xa6, 0x07, 0xe3, 0xc5,
	0x36, 0x62, 0x38, 0x78, 0xf0, 0x84, 0xd1, 0x90, 0xe0, 0xa5, 0x3c, 0x80, 0x29, 0xed, 0x02, 0x9b,
	0x48, 0x17, 0xdb, 0x85, 0xc4, 0x37, 0xf1, 0x0d, 0x7d, 0x0d, 0x97, 0xdd, 0x69, 0x2d, 0xd2, 0x10,
	0x39, 0xed, 0x74, 0x7e, 0x7f, 0xf6, 0xd7, 0x99, 0x85, 0xfb, 0x19, 0x97, 0xf3, 0xd5, 0xc4, 0x8b,
	0xc4, 0xc2, 0x9f, 0xae, 0x32, 0x96, 0x8a, 0x89, 0x90, 0x3c, 0xca, 0xfc, 0x65, 0x2a, 0xa4, 0xf0,
	0x53, 0x36, 0xe3, 0x22, 0xa1, 0xe3, 0x46, 0xc1, 0x6b, 0x1e, 0x31, 0x4f, 0x63, 0xd8, 0x30, 0x5d,
	0xa7, 0xbf, 0xdf, 0x82, 0xc7, 0x2c, 0x91, 0x7c, 0xfa, 0x51, 0x14, 0x46, 0xee, 0xdc, 0x1e, 0x70,
	0xf3, 0xdf, 0x24, 0xaa, 0xbd, 0x50, 0x12, 0x73, 0x18, 0x89, 0xfb, 0x08, 0x38, 0xe2, 0x99, 0x0c,
	0xb4, 0x4d, 0x16, 0xb0, 0xf7, 0x15, 0xcb, 0x24, 0x7a, 0xd0, 0xcc, 0xd3, 0xd8, 0xd6, 0xa5, 0x75,
	0xdd, 0xea, 0xa1, 0x57, 0xc4, 0x1b, 0x52, 0x11, 0x14, 0x1c, 0xf7, 0x01, 0xba, 0x5b, 0x2e, 0xd9,
	0x52, 0x1d, 0x0c, 0xaf, 0x80, 0x66, 0xa0, 0x4c, 0x6a, 0xca, 0xa4, 0xe3, 0x51, 0x5c, 0x43, 0x0c,
	0x08, 0xdd, 0xc8, 0x07, 0x29, 0x0b, 0x25, 0xa3, 0x3e, 0xa5, 0x28, 0xcb, 0xad, 0x3d, 0xf2, 0x17,
	0x38, 0xdd, 0x96, 0xd3, 0xf5, 0x7d, 0xe8, 0x44, 0xba, 0x1f, 0xbf, 0xee, 0xf5, 0x69, 0x13, 0xcb,
	0x7c, 0xba, 0x9f, 0x16, 0x9c, 0x8c, 0xc3, 0xf5, 0xaf, 0x30, 0x07, 0x8e, 0x04, 0x3b, 0xf0, 0x8f,
	0xc7, 0x76, 0x4d, 0x31, 0x8f, 0x02, 0x55, 0x21, 0x42, 0x3d, 0x09, 0x17, 0xcc, 0xae, 0xeb, 0x8e,
	0xae, 0xd1, 0x87, 0xe6, 0x9b, 0x88, 0x42, 0xb9, 0x89, 0xd6, 0xd0, 0x9e, 0x5d, 0x8f, 0xb6, 0xf3,
	0xcc, 0xc4, 0x88, 0xa0, 0xa0, 0x20, 0xb9, 0x1e, 0x60, 0x39, 0x19, 0xfd, 0xa7, 0x0d, 0xff, 0xa3,
	0x79, 0x98, 0xcc, 0x58, 0xac, 0x93, 0x35, 0x83, 0xfc, 0xb3, 0xf7, 0x65, 0x41, 0xdb, 0x90, 0xc7,
	0xe6, 0x69, 0xe2, 0x13, 0xb4, 0x4a, 0x9b, 0x42, 0x27, 0x1f, 0xc5, 0xee, 0x23, 0x70, 0xce, 0x2b,
	0x31, 0xba, 0x73, 0x08, 0xc7, 0xe5, 0x99, 0x63, 0x41, 0xae, 0x58, 0xa4, 0x73, 0x51, 0x0d, 0x92,
	0xd5, 0x00, 0xe0, 0xe7, 0xa7, 0xf0, 0x2c, 0xe7, 0xee, 0xac, 0xc0, 0x71, 0xaa, 0x20, 0x63, 0x32,
	0x69, 0xe8, 0xe7, 0x7c, 0xf7, 0x1d, 0x00, 0x00, 0xff, 0xff, 0x7f, 0x27, 0x07, 0xbe, 0xb0, 0x03,
	0x00, 0x00,
}
