// Code generated by protoc-gen-gogo.
// source: github.com/fuserobotics/proto/auth/auth-service.proto
// DO NOT EDIT!

/*
	Package auth is a generated protocol buffer package.

	It is generated from these files:
		github.com/fuserobotics/proto/auth/auth-service.proto
		github.com/fuserobotics/proto/auth/auth.proto

	It has these top-level messages:
		AuthWithPasswordRequest
		AuthWithPasswordResponse
		User
*/
package auth

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import permissions "github.com/fuserobotics/proto/permissions"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import errors "errors"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.GoGoProtoPackageIsVersion1

//
// AuthWithPassword: auth attempt with password
// where sha256() returns lowercase, 64 char hex string
// Password is: sha256(timestamp + sha256(sha256(username) + plaintext password))
type AuthWithPasswordRequest struct {
	Username  string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Password  string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	Timestamp int32  `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (m *AuthWithPasswordRequest) Reset()         { *m = AuthWithPasswordRequest{} }
func (m *AuthWithPasswordRequest) String() string { return proto.CompactTextString(m) }
func (*AuthWithPasswordRequest) ProtoMessage()    {}
func (*AuthWithPasswordRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorAuthService, []int{0}
}

type AuthWithPasswordResponse struct {
	Cert                  *User_UserCert                            `protobuf:"bytes,1,opt,name=cert" json:"cert,omitempty"`
	Meta                  *User_UserMetadata                        `protobuf:"bytes,2,opt,name=meta" json:"meta,omitempty"`
	GlobalRole            *User_UserRoleSet                         `protobuf:"bytes,3,opt,name=global_role,json=globalRole" json:"global_role,omitempty"`
	RegionRole            map[string]*User_UserRoleSet              `protobuf:"bytes,4,rep,name=region_role,json=regionRole" json:"region_role,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
	GlobalExtraPermission *permissions.SystemPermissions            `protobuf:"bytes,5,opt,name=global_extra_permission,json=globalExtraPermission" json:"global_extra_permission,omitempty"`
	RegionExtraPermission map[string]*permissions.SystemPermissions `protobuf:"bytes,6,rep,name=region_extra_permission,json=regionExtraPermission" json:"region_extra_permission,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *AuthWithPasswordResponse) Reset()         { *m = AuthWithPasswordResponse{} }
func (m *AuthWithPasswordResponse) String() string { return proto.CompactTextString(m) }
func (*AuthWithPasswordResponse) ProtoMessage()    {}
func (*AuthWithPasswordResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorAuthService, []int{1}
}

func (m *AuthWithPasswordResponse) GetCert() *User_UserCert {
	if m != nil {
		return m.Cert
	}
	return nil
}

func (m *AuthWithPasswordResponse) GetMeta() *User_UserMetadata {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *AuthWithPasswordResponse) GetGlobalRole() *User_UserRoleSet {
	if m != nil {
		return m.GlobalRole
	}
	return nil
}

func (m *AuthWithPasswordResponse) GetRegionRole() map[string]*User_UserRoleSet {
	if m != nil {
		return m.RegionRole
	}
	return nil
}

func (m *AuthWithPasswordResponse) GetGlobalExtraPermission() *permissions.SystemPermissions {
	if m != nil {
		return m.GlobalExtraPermission
	}
	return nil
}

func (m *AuthWithPasswordResponse) GetRegionExtraPermission() map[string]*permissions.SystemPermissions {
	if m != nil {
		return m.RegionExtraPermission
	}
	return nil
}

func init() {
	proto.RegisterType((*AuthWithPasswordRequest)(nil), "auth.AuthWithPasswordRequest")
	proto.RegisterType((*AuthWithPasswordResponse)(nil), "auth.AuthWithPasswordResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for AuthService service

type AuthServiceClient interface {
	AuthWithPassword(ctx context.Context, in *AuthWithPasswordRequest, opts ...grpc.CallOption) (*AuthWithPasswordResponse, error)
}

type authServiceClient struct {
	cc *grpc.ClientConn
}

func NewAuthServiceClient(cc *grpc.ClientConn) AuthServiceClient {
	return &authServiceClient{cc}
}

func (c *authServiceClient) AuthWithPassword(ctx context.Context, in *AuthWithPasswordRequest, opts ...grpc.CallOption) (*AuthWithPasswordResponse, error) {
	out := new(AuthWithPasswordResponse)
	err := grpc.Invoke(ctx, "/auth.AuthService/AuthWithPassword", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AuthService service

type AuthServiceServer interface {
	AuthWithPassword(context.Context, *AuthWithPasswordRequest) (*AuthWithPasswordResponse, error)
}

func RegisterAuthServiceServer(s *grpc.Server, srv AuthServiceServer) {
	s.RegisterService(&_AuthService_serviceDesc, srv)
}

func _AuthService_AuthWithPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthWithPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).AuthWithPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthService/AuthWithPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).AuthWithPassword(ctx, req.(*AuthWithPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AuthService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "auth.AuthService",
	HandlerType: (*AuthServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AuthWithPassword",
			Handler:    _AuthService_AuthWithPassword_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptorAuthService,
}

func (m *AuthWithPasswordRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *AuthWithPasswordRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Username) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintAuthService(data, i, uint64(len(m.Username)))
		i += copy(data[i:], m.Username)
	}
	if len(m.Password) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintAuthService(data, i, uint64(len(m.Password)))
		i += copy(data[i:], m.Password)
	}
	if m.Timestamp != 0 {
		data[i] = 0x18
		i++
		i = encodeVarintAuthService(data, i, uint64(m.Timestamp))
	}
	return i, nil
}

func (m *AuthWithPasswordResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *AuthWithPasswordResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Cert != nil {
		data[i] = 0xa
		i++
		i = encodeVarintAuthService(data, i, uint64(m.Cert.Size()))
		n1, err := m.Cert.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Meta != nil {
		data[i] = 0x12
		i++
		i = encodeVarintAuthService(data, i, uint64(m.Meta.Size()))
		n2, err := m.Meta.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.GlobalRole != nil {
		data[i] = 0x1a
		i++
		i = encodeVarintAuthService(data, i, uint64(m.GlobalRole.Size()))
		n3, err := m.GlobalRole.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if len(m.RegionRole) > 0 {
		for k, _ := range m.RegionRole {
			data[i] = 0x22
			i++
			v := m.RegionRole[k]
			if v == nil {
				return 0, errors.New("proto: map has nil element")
			}
			msgSize := v.Size()
			mapSize := 1 + len(k) + sovAuthService(uint64(len(k))) + 1 + msgSize + sovAuthService(uint64(msgSize))
			i = encodeVarintAuthService(data, i, uint64(mapSize))
			data[i] = 0xa
			i++
			i = encodeVarintAuthService(data, i, uint64(len(k)))
			i += copy(data[i:], k)
			data[i] = 0x12
			i++
			i = encodeVarintAuthService(data, i, uint64(v.Size()))
			n4, err := v.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n4
		}
	}
	if m.GlobalExtraPermission != nil {
		data[i] = 0x2a
		i++
		i = encodeVarintAuthService(data, i, uint64(m.GlobalExtraPermission.Size()))
		n5, err := m.GlobalExtraPermission.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if len(m.RegionExtraPermission) > 0 {
		for k, _ := range m.RegionExtraPermission {
			data[i] = 0x32
			i++
			v := m.RegionExtraPermission[k]
			if v == nil {
				return 0, errors.New("proto: map has nil element")
			}
			msgSize := v.Size()
			mapSize := 1 + len(k) + sovAuthService(uint64(len(k))) + 1 + msgSize + sovAuthService(uint64(msgSize))
			i = encodeVarintAuthService(data, i, uint64(mapSize))
			data[i] = 0xa
			i++
			i = encodeVarintAuthService(data, i, uint64(len(k)))
			i += copy(data[i:], k)
			data[i] = 0x12
			i++
			i = encodeVarintAuthService(data, i, uint64(v.Size()))
			n6, err := v.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n6
		}
	}
	return i, nil
}

func encodeFixed64AuthService(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32AuthService(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintAuthService(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func (m *AuthWithPasswordRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovAuthService(uint64(l))
	}
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovAuthService(uint64(l))
	}
	if m.Timestamp != 0 {
		n += 1 + sovAuthService(uint64(m.Timestamp))
	}
	return n
}

func (m *AuthWithPasswordResponse) Size() (n int) {
	var l int
	_ = l
	if m.Cert != nil {
		l = m.Cert.Size()
		n += 1 + l + sovAuthService(uint64(l))
	}
	if m.Meta != nil {
		l = m.Meta.Size()
		n += 1 + l + sovAuthService(uint64(l))
	}
	if m.GlobalRole != nil {
		l = m.GlobalRole.Size()
		n += 1 + l + sovAuthService(uint64(l))
	}
	if len(m.RegionRole) > 0 {
		for k, v := range m.RegionRole {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
			}
			mapEntrySize := 1 + len(k) + sovAuthService(uint64(len(k))) + 1 + l + sovAuthService(uint64(l))
			n += mapEntrySize + 1 + sovAuthService(uint64(mapEntrySize))
		}
	}
	if m.GlobalExtraPermission != nil {
		l = m.GlobalExtraPermission.Size()
		n += 1 + l + sovAuthService(uint64(l))
	}
	if len(m.RegionExtraPermission) > 0 {
		for k, v := range m.RegionExtraPermission {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
			}
			mapEntrySize := 1 + len(k) + sovAuthService(uint64(len(k))) + 1 + l + sovAuthService(uint64(l))
			n += mapEntrySize + 1 + sovAuthService(uint64(mapEntrySize))
		}
	}
	return n
}

func sovAuthService(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozAuthService(x uint64) (n int) {
	return sovAuthService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AuthWithPasswordRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuthWithPasswordRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuthWithPasswordRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Timestamp |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAuthService(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AuthWithPasswordResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuthWithPasswordResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuthWithPasswordResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cert", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Cert == nil {
				m.Cert = &User_UserCert{}
			}
			if err := m.Cert.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Meta == nil {
				m.Meta = &User_UserMetadata{}
			}
			if err := m.Meta.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GlobalRole", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GlobalRole == nil {
				m.GlobalRole = &User_UserRoleSet{}
			}
			if err := m.GlobalRole.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegionRole", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapkey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLenmapkey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapkey := int(stringLenmapkey)
			if intStringLenmapkey < 0 {
				return ErrInvalidLengthAuthService
			}
			postStringIndexmapkey := iNdEx + intStringLenmapkey
			if postStringIndexmapkey > l {
				return io.ErrUnexpectedEOF
			}
			mapkey := string(data[iNdEx:postStringIndexmapkey])
			iNdEx = postStringIndexmapkey
			var valuekey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				valuekey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var mapmsglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				mapmsglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if mapmsglen < 0 {
				return ErrInvalidLengthAuthService
			}
			postmsgIndex := iNdEx + mapmsglen
			if mapmsglen < 0 {
				return ErrInvalidLengthAuthService
			}
			if postmsgIndex > l {
				return io.ErrUnexpectedEOF
			}
			mapvalue := &User_UserRoleSet{}
			if err := mapvalue.Unmarshal(data[iNdEx:postmsgIndex]); err != nil {
				return err
			}
			iNdEx = postmsgIndex
			if m.RegionRole == nil {
				m.RegionRole = make(map[string]*User_UserRoleSet)
			}
			m.RegionRole[mapkey] = mapvalue
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GlobalExtraPermission", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GlobalExtraPermission == nil {
				m.GlobalExtraPermission = &permissions.SystemPermissions{}
			}
			if err := m.GlobalExtraPermission.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegionExtraPermission", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapkey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLenmapkey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapkey := int(stringLenmapkey)
			if intStringLenmapkey < 0 {
				return ErrInvalidLengthAuthService
			}
			postStringIndexmapkey := iNdEx + intStringLenmapkey
			if postStringIndexmapkey > l {
				return io.ErrUnexpectedEOF
			}
			mapkey := string(data[iNdEx:postStringIndexmapkey])
			iNdEx = postStringIndexmapkey
			var valuekey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				valuekey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var mapmsglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				mapmsglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if mapmsglen < 0 {
				return ErrInvalidLengthAuthService
			}
			postmsgIndex := iNdEx + mapmsglen
			if mapmsglen < 0 {
				return ErrInvalidLengthAuthService
			}
			if postmsgIndex > l {
				return io.ErrUnexpectedEOF
			}
			mapvalue := &permissions.SystemPermissions{}
			if err := mapvalue.Unmarshal(data[iNdEx:postmsgIndex]); err != nil {
				return err
			}
			iNdEx = postmsgIndex
			if m.RegionExtraPermission == nil {
				m.RegionExtraPermission = make(map[string]*permissions.SystemPermissions)
			}
			m.RegionExtraPermission[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthService(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAuthService(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAuthService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAuthService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAuthService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthAuthService
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowAuthService
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipAuthService(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthAuthService = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAuthService   = fmt.Errorf("proto: integer overflow")
)

var fileDescriptorAuthService = []byte{
	// 474 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x53, 0xcd, 0x6e, 0xd4, 0x30,
	0x10, 0xd6, 0x76, 0x77, 0x2b, 0x3a, 0x41, 0xa2, 0x32, 0x2a, 0x89, 0x22, 0x58, 0x55, 0xbd, 0x80,
	0x04, 0xcd, 0x4a, 0x01, 0xc4, 0xdf, 0x09, 0x50, 0x8f, 0x88, 0xe2, 0x55, 0xe1, 0x58, 0x9c, 0x74,
	0x9a, 0x8d, 0x48, 0xd6, 0xa9, 0xed, 0x14, 0xf6, 0x05, 0x78, 0x36, 0x8e, 0x3c, 0x02, 0xe2, 0x49,
	0xf0, 0x4f, 0x68, 0xb6, 0x69, 0xb3, 0x70, 0x88, 0xe5, 0x99, 0xf9, 0xbe, 0xf9, 0x3e, 0x8f, 0x63,
	0x78, 0x9a, 0xe5, 0x6a, 0x5e, 0x27, 0x51, 0xca, 0xcb, 0xe9, 0x69, 0x2d, 0x51, 0xf0, 0x84, 0xab,
	0x3c, 0x95, 0xd3, 0x4a, 0x70, 0xc5, 0xa7, 0xac, 0x56, 0x73, 0xbb, 0xec, 0xeb, 0xd2, 0x79, 0x9e,
	0x62, 0x64, 0xf3, 0x64, 0x64, 0x72, 0xe1, 0xfe, 0x0a, 0x39, 0xe3, 0x19, 0x77, 0xa4, 0xa4, 0x3e,
	0xb5, 0x91, 0xeb, 0x60, 0x76, 0x8e, 0x74, 0x09, 0xbe, 0x4e, 0xab, 0x81, 0xbf, 0x5a, 0x0f, 0xaf,
	0x50, 0x94, 0xb9, 0x94, 0x39, 0x5f, 0xc8, 0xd5, 0xbd, 0x23, 0xef, 0x71, 0xf0, 0x5f, 0xeb, 0x56,
	0x9f, 0x74, 0x8b, 0x43, 0x26, 0xe5, 0x57, 0x2e, 0x4e, 0x28, 0x9e, 0xd5, 0x28, 0x15, 0x09, 0xe1,
	0x86, 0xe9, 0xb6, 0x60, 0x25, 0x06, 0x83, 0xdd, 0xc1, 0x83, 0x2d, 0x7a, 0x11, 0x9b, 0x5a, 0xd5,
	0xc0, 0x83, 0x0d, 0x57, 0xfb, 0x1b, 0x93, 0xbb, 0xb0, 0xa5, 0xf2, 0x52, 0x77, 0x60, 0x65, 0x15,
	0x0c, 0x75, 0x71, 0x4c, 0xdb, 0xc4, 0xde, 0xf7, 0x31, 0x04, 0x57, 0x15, 0x65, 0xa5, 0x2d, 0x21,
	0xb9, 0x0f, 0xa3, 0x14, 0x85, 0xb2, 0x72, 0x5e, 0x7c, 0x3b, 0xb2, 0xa7, 0x3c, 0xd2, 0xa2, 0x76,
	0x79, 0xab, 0x4b, 0xd4, 0x02, 0xc8, 0x43, 0x18, 0x95, 0xa8, 0x98, 0xd5, 0xf6, 0x62, 0xbf, 0x03,
	0x7c, 0xa7, 0x4b, 0x27, 0x4c, 0x31, 0x6a, 0x41, 0xe4, 0x19, 0x78, 0x59, 0xc1, 0x13, 0x56, 0x1c,
	0x0b, 0x5e, 0xa0, 0xb5, 0xe4, 0xc5, 0x77, 0x3a, 0x1c, 0xaa, 0x4b, 0x33, 0x54, 0x14, 0x1c, 0xd4,
	0x84, 0xe4, 0x3d, 0x78, 0x02, 0x33, 0x3d, 0x2d, 0x47, 0x1c, 0xed, 0x0e, 0x35, 0x31, 0x72, 0xc4,
	0xbe, 0x33, 0x44, 0xd4, 0x32, 0x0c, 0xff, 0x60, 0xa1, 0xc4, 0x92, 0x82, 0xb8, 0x48, 0x90, 0x8f,
	0xe0, 0x37, 0x4e, 0xf0, 0x9b, 0x12, 0xec, 0xb8, 0xbd, 0x8f, 0x60, 0x6c, 0x5d, 0x4d, 0xa2, 0xd5,
	0x2b, 0x9a, 0x2d, 0xa5, 0xc2, 0xf2, 0xb0, 0xcd, 0xd0, 0x1d, 0x47, 0x3f, 0x30, 0xec, 0x36, 0x4f,
	0xce, 0xc0, 0x6f, 0x8c, 0x5e, 0xe9, 0xbb, 0x69, 0x4d, 0xbf, 0xf8, 0x2f, 0xd3, 0x9d, 0xb6, 0xce,
	0xff, 0x8e, 0xb8, 0xae, 0x16, 0x1e, 0xc1, 0xad, 0xce, 0x49, 0xc9, 0x36, 0x0c, 0xbf, 0xe0, 0xb2,
	0xf9, 0x57, 0xcc, 0x96, 0x3c, 0x82, 0xf1, 0x39, 0x2b, 0x6a, 0x6c, 0xee, 0xa9, 0x6f, 0xe6, 0x0e,
	0xf4, 0x72, 0xe3, 0xf9, 0x20, 0x9c, 0x43, 0xd8, 0xef, 0xe5, 0x1a, 0x85, 0x27, 0x97, 0x15, 0xfe,
	0x35, 0xbf, 0x56, 0x29, 0xfe, 0x0c, 0x9e, 0x19, 0xc7, 0xcc, 0xbd, 0x57, 0xf2, 0x01, 0xb6, 0xbb,
	0xd3, 0x21, 0xf7, 0xfa, 0xa6, 0x66, 0x1f, 0x48, 0x38, 0x59, 0x3f, 0xd4, 0x37, 0x37, 0x7f, 0xfc,
	0x9e, 0x0c, 0x7e, 0xea, 0xef, 0x97, 0xfe, 0x92, 0x4d, 0xfb, 0xe0, 0x1e, 0xff, 0x09, 0x00, 0x00,
	0xff, 0xff, 0x63, 0x01, 0x24, 0xe4, 0x4a, 0x04, 0x00, 0x00,
}
