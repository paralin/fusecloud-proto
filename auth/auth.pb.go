// Code generated by protoc-gen-gogo.
// source: github.com/synrobo/proto/auth/auth.proto
// DO NOT EDIT!

package auth

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import common "github.com/synrobo/proto/common"
import permissions "github.com/synrobo/proto/permissions"

import errors "errors"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type User_UserRole int32

const (
	// Nothing special
	User_NONE User_UserRole = 0
	// Access to everything
	User_SUPERUSER User_UserRole = 1
)

var User_UserRole_name = map[int32]string{
	0: "NONE",
	1: "SUPERUSER",
}
var User_UserRole_value = map[string]int32{
	"NONE":      0,
	"SUPERUSER": 1,
}

func (x User_UserRole) String() string {
	return proto.EnumName(User_UserRole_name, int32(x))
}
func (User_UserRole) EnumDescriptor() ([]byte, []int) { return fileDescriptorAuth, []int{0, 0} }

//
// User: a standard user with username, email, password
type User struct {
	Username string             `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Password string             `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	Meta     *User_UserMetadata `protobuf:"bytes,3,opt,name=meta" json:"meta,omitempty"`
	// certificates, latest at index 0
	Cert []*User_UserCert `protobuf:"bytes,4,rep,name=cert" json:"cert,omitempty"`
	// processed first
	GlobalRole User_UserRole `protobuf:"varint,5,opt,name=global_role,json=globalRole,proto3,enum=auth.User_UserRole" json:"global_role,omitempty"`
	// processed second
	RegionRole map[string]User_UserRole `protobuf:"bytes,6,rep,name=region_role,json=regionRole" json:"region_role,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=auth.User_UserRole"`
	// extra permissions
	GlobalExtraPermission []*permissions.SystemPermissions `protobuf:"bytes,7,rep,name=global_extra_permission,json=globalExtraPermission" json:"global_extra_permission,omitempty"`
	// per region extra permissions
	RegionExtraPermission map[string]*permissions.SystemPermissions `protobuf:"bytes,8,rep,name=region_extra_permission,json=regionExtraPermission" json:"region_extra_permission,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *User) Reset()                    { *m = User{} }
func (m *User) String() string            { return proto.CompactTextString(m) }
func (*User) ProtoMessage()               {}
func (*User) Descriptor() ([]byte, []int) { return fileDescriptorAuth, []int{0} }

func (m *User) GetMeta() *User_UserMetadata {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *User) GetCert() []*User_UserCert {
	if m != nil {
		return m.Cert
	}
	return nil
}

func (m *User) GetRegionRole() map[string]User_UserRole {
	if m != nil {
		return m.RegionRole
	}
	return nil
}

func (m *User) GetGlobalExtraPermission() []*permissions.SystemPermissions {
	if m != nil {
		return m.GlobalExtraPermission
	}
	return nil
}

func (m *User) GetRegionExtraPermission() map[string]*permissions.SystemPermissions {
	if m != nil {
		return m.RegionExtraPermission
	}
	return nil
}

type User_UserMetadata struct {
	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Email string `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
}

func (m *User_UserMetadata) Reset()                    { *m = User_UserMetadata{} }
func (m *User_UserMetadata) String() string            { return proto.CompactTextString(m) }
func (*User_UserMetadata) ProtoMessage()               {}
func (*User_UserMetadata) Descriptor() ([]byte, []int) { return fileDescriptorAuth, []int{0, 2} }

type User_UserCert struct {
	Chain *common.CertChain `protobuf:"bytes,1,opt,name=chain" json:"chain,omitempty"`
	Pkey  string            `protobuf:"bytes,2,opt,name=pkey,proto3" json:"pkey,omitempty"`
}

func (m *User_UserCert) Reset()                    { *m = User_UserCert{} }
func (m *User_UserCert) String() string            { return proto.CompactTextString(m) }
func (*User_UserCert) ProtoMessage()               {}
func (*User_UserCert) Descriptor() ([]byte, []int) { return fileDescriptorAuth, []int{0, 3} }

func (m *User_UserCert) GetChain() *common.CertChain {
	if m != nil {
		return m.Chain
	}
	return nil
}

func init() {
	proto.RegisterType((*User)(nil), "auth.User")
	proto.RegisterType((*User_UserMetadata)(nil), "auth.User.UserMetadata")
	proto.RegisterType((*User_UserCert)(nil), "auth.User.UserCert")
	proto.RegisterEnum("auth.User_UserRole", User_UserRole_name, User_UserRole_value)
}
func (m *User) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *User) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Username) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintAuth(data, i, uint64(len(m.Username)))
		i += copy(data[i:], m.Username)
	}
	if len(m.Password) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintAuth(data, i, uint64(len(m.Password)))
		i += copy(data[i:], m.Password)
	}
	if m.Meta != nil {
		data[i] = 0x1a
		i++
		i = encodeVarintAuth(data, i, uint64(m.Meta.Size()))
		n1, err := m.Meta.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.Cert) > 0 {
		for _, msg := range m.Cert {
			data[i] = 0x22
			i++
			i = encodeVarintAuth(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.GlobalRole != 0 {
		data[i] = 0x28
		i++
		i = encodeVarintAuth(data, i, uint64(m.GlobalRole))
	}
	if len(m.RegionRole) > 0 {
		for k, _ := range m.RegionRole {
			data[i] = 0x32
			i++
			v := m.RegionRole[k]
			mapSize := 1 + len(k) + sovAuth(uint64(len(k))) + 1 + sovAuth(uint64(v))
			i = encodeVarintAuth(data, i, uint64(mapSize))
			data[i] = 0xa
			i++
			i = encodeVarintAuth(data, i, uint64(len(k)))
			i += copy(data[i:], k)
			data[i] = 0x10
			i++
			i = encodeVarintAuth(data, i, uint64(v))
		}
	}
	if len(m.GlobalExtraPermission) > 0 {
		for _, msg := range m.GlobalExtraPermission {
			data[i] = 0x3a
			i++
			i = encodeVarintAuth(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.RegionExtraPermission) > 0 {
		for k, _ := range m.RegionExtraPermission {
			data[i] = 0x42
			i++
			v := m.RegionExtraPermission[k]
			if v == nil {
				return 0, errors.New("proto: map has nil element")
			}
			msgSize := v.Size()
			mapSize := 1 + len(k) + sovAuth(uint64(len(k))) + 1 + msgSize + sovAuth(uint64(msgSize))
			i = encodeVarintAuth(data, i, uint64(mapSize))
			data[i] = 0xa
			i++
			i = encodeVarintAuth(data, i, uint64(len(k)))
			i += copy(data[i:], k)
			data[i] = 0x12
			i++
			i = encodeVarintAuth(data, i, uint64(v.Size()))
			n2, err := v.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n2
		}
	}
	return i, nil
}

func (m *User_UserMetadata) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *User_UserMetadata) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintAuth(data, i, uint64(len(m.Name)))
		i += copy(data[i:], m.Name)
	}
	if len(m.Email) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintAuth(data, i, uint64(len(m.Email)))
		i += copy(data[i:], m.Email)
	}
	return i, nil
}

func (m *User_UserCert) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *User_UserCert) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Chain != nil {
		data[i] = 0xa
		i++
		i = encodeVarintAuth(data, i, uint64(m.Chain.Size()))
		n3, err := m.Chain.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if len(m.Pkey) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintAuth(data, i, uint64(len(m.Pkey)))
		i += copy(data[i:], m.Pkey)
	}
	return i, nil
}

func encodeFixed64Auth(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Auth(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintAuth(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func (m *User) Size() (n int) {
	var l int
	_ = l
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovAuth(uint64(l))
	}
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovAuth(uint64(l))
	}
	if m.Meta != nil {
		l = m.Meta.Size()
		n += 1 + l + sovAuth(uint64(l))
	}
	if len(m.Cert) > 0 {
		for _, e := range m.Cert {
			l = e.Size()
			n += 1 + l + sovAuth(uint64(l))
		}
	}
	if m.GlobalRole != 0 {
		n += 1 + sovAuth(uint64(m.GlobalRole))
	}
	if len(m.RegionRole) > 0 {
		for k, v := range m.RegionRole {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovAuth(uint64(len(k))) + 1 + sovAuth(uint64(v))
			n += mapEntrySize + 1 + sovAuth(uint64(mapEntrySize))
		}
	}
	if len(m.GlobalExtraPermission) > 0 {
		for _, e := range m.GlobalExtraPermission {
			l = e.Size()
			n += 1 + l + sovAuth(uint64(l))
		}
	}
	if len(m.RegionExtraPermission) > 0 {
		for k, v := range m.RegionExtraPermission {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
			}
			mapEntrySize := 1 + len(k) + sovAuth(uint64(len(k))) + 1 + l + sovAuth(uint64(l))
			n += mapEntrySize + 1 + sovAuth(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *User_UserMetadata) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovAuth(uint64(l))
	}
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovAuth(uint64(l))
	}
	return n
}

func (m *User_UserCert) Size() (n int) {
	var l int
	_ = l
	if m.Chain != nil {
		l = m.Chain.Size()
		n += 1 + l + sovAuth(uint64(l))
	}
	l = len(m.Pkey)
	if l > 0 {
		n += 1 + l + sovAuth(uint64(l))
	}
	return n
}

func sovAuth(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozAuth(x uint64) (n int) {
	return sovAuth(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *User) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuth
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: User: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: User: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuth
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuth
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuth
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Meta == nil {
				m.Meta = &User_UserMetadata{}
			}
			if err := m.Meta.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cert", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuth
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cert = append(m.Cert, &User_UserCert{})
			if err := m.Cert[len(m.Cert)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GlobalRole", wireType)
			}
			m.GlobalRole = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.GlobalRole |= (User_UserRole(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegionRole", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuth
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapkey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLenmapkey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapkey := int(stringLenmapkey)
			if intStringLenmapkey < 0 {
				return ErrInvalidLengthAuth
			}
			postStringIndexmapkey := iNdEx + intStringLenmapkey
			if postStringIndexmapkey > l {
				return io.ErrUnexpectedEOF
			}
			mapkey := string(data[iNdEx:postStringIndexmapkey])
			iNdEx = postStringIndexmapkey
			var valuekey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				valuekey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var mapvalue User_UserRole
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				mapvalue |= (User_UserRole(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if m.RegionRole == nil {
				m.RegionRole = make(map[string]User_UserRole)
			}
			m.RegionRole[mapkey] = mapvalue
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GlobalExtraPermission", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuth
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GlobalExtraPermission = append(m.GlobalExtraPermission, &permissions.SystemPermissions{})
			if err := m.GlobalExtraPermission[len(m.GlobalExtraPermission)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegionExtraPermission", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuth
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapkey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLenmapkey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapkey := int(stringLenmapkey)
			if intStringLenmapkey < 0 {
				return ErrInvalidLengthAuth
			}
			postStringIndexmapkey := iNdEx + intStringLenmapkey
			if postStringIndexmapkey > l {
				return io.ErrUnexpectedEOF
			}
			mapkey := string(data[iNdEx:postStringIndexmapkey])
			iNdEx = postStringIndexmapkey
			var valuekey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				valuekey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var mapmsglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				mapmsglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if mapmsglen < 0 {
				return ErrInvalidLengthAuth
			}
			postmsgIndex := iNdEx + mapmsglen
			if mapmsglen < 0 {
				return ErrInvalidLengthAuth
			}
			if postmsgIndex > l {
				return io.ErrUnexpectedEOF
			}
			mapvalue := &permissions.SystemPermissions{}
			if err := mapvalue.Unmarshal(data[iNdEx:postmsgIndex]); err != nil {
				return err
			}
			iNdEx = postmsgIndex
			if m.RegionExtraPermission == nil {
				m.RegionExtraPermission = make(map[string]*permissions.SystemPermissions)
			}
			m.RegionExtraPermission[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuth(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuth
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *User_UserMetadata) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuth
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuth
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuth
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuth(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuth
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *User_UserCert) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuth
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserCert: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserCert: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chain", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuth
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Chain == nil {
				m.Chain = &common.CertChain{}
			}
			if err := m.Chain.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pkey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuth
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pkey = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuth(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuth
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAuth(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAuth
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthAuth
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowAuth
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipAuth(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthAuth = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAuth   = fmt.Errorf("proto: integer overflow")
)

var fileDescriptorAuth = []byte{
	// 485 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x84, 0x53, 0x5f, 0x6f, 0xd3, 0x30,
	0x10, 0x27, 0x6b, 0x5a, 0xba, 0xeb, 0x80, 0x62, 0x98, 0x1a, 0xe5, 0x61, 0x9a, 0x86, 0x10, 0x43,
	0x40, 0x2a, 0x8d, 0x09, 0x4d, 0xf0, 0xc6, 0x14, 0xf1, 0xc4, 0x98, 0x5c, 0x95, 0x37, 0x34, 0x39,
	0x9d, 0x49, 0x23, 0x92, 0xb8, 0x72, 0x1c, 0xa0, 0xdf, 0x87, 0x0f, 0xc3, 0x23, 0x1f, 0x01, 0xf1,
	0x49, 0xb0, 0xcf, 0xd9, 0x6a, 0xb5, 0x8b, 0xf6, 0x90, 0xe4, 0xee, 0x7e, 0x7f, 0x7c, 0x76, 0xce,
	0x70, 0x98, 0x66, 0x6a, 0x5e, 0x27, 0xd1, 0x4c, 0x14, 0xe3, 0x6a, 0x59, 0x4a, 0x91, 0x88, 0xf1,
	0x42, 0x0a, 0x25, 0xc6, 0xac, 0x56, 0x73, 0x7c, 0x45, 0x98, 0x13, 0xdf, 0xc4, 0xe1, 0x2b, 0x87,
	0x9f, 0x8a, 0xb4, 0x21, 0x27, 0xf5, 0x57, 0xcc, 0xac, 0xd2, 0x44, 0x56, 0x14, 0xbe, 0x6c, 0xb5,
	0xd7, 0x95, 0x42, 0x94, 0xcd, 0xa7, 0x61, 0xbf, 0x69, 0x65, 0x2f, 0xb8, 0x2c, 0xb2, 0xaa, 0xca,
	0x44, 0x59, 0xb9, 0xb1, 0xd5, 0x1d, 0xfc, 0xea, 0x81, 0x3f, 0xad, 0xb8, 0x24, 0x21, 0xf4, 0x6b,
	0xfd, 0x2d, 0x59, 0xc1, 0x03, 0x6f, 0xdf, 0x3b, 0xdc, 0xa6, 0xd7, 0xb9, 0xc1, 0x16, 0xac, 0xaa,
	0x7e, 0x08, 0x79, 0x19, 0x6c, 0x59, 0xec, 0x2a, 0x27, 0x2f, 0xc0, 0x2f, 0xb8, 0x62, 0x41, 0x47,
	0xd7, 0x07, 0x47, 0xa3, 0x08, 0xb7, 0x6d, 0x1c, 0xf1, 0xf5, 0x51, 0x43, 0x97, 0x4c, 0x31, 0x8a,
	0x24, 0xf2, 0x0c, 0xfc, 0x19, 0x97, 0x2a, 0xf0, 0xf7, 0x3b, 0x9a, 0xfc, 0x68, 0x8d, 0x7c, 0xaa,
	0x21, 0x8a, 0x04, 0x72, 0x0c, 0x83, 0x34, 0x17, 0x09, 0xcb, 0x2f, 0xa4, 0xc8, 0x79, 0xd0, 0xd5,
	0xe6, 0xf7, 0x37, 0xf8, 0x54, 0x43, 0x14, 0x2c, 0xcf, 0xc4, 0xe4, 0x1d, 0x0c, 0x24, 0x4f, 0xf5,
	0xee, 0xac, 0xaa, 0x87, 0xab, 0x84, 0x8e, 0x8a, 0x22, 0x6a, 0xb8, 0x71, 0xa9, 0xe4, 0x92, 0x82,
	0xbc, 0x2e, 0x90, 0xcf, 0x30, 0x6a, 0x96, 0xe4, 0x3f, 0x95, 0x64, 0x17, 0xab, 0xb3, 0x0a, 0xee,
	0xa2, 0xd1, 0x5e, 0xe4, 0x1e, 0xdf, 0x64, 0x59, 0x29, 0x5e, 0x9c, 0xaf, 0x2a, 0x74, 0xd7, 0xca,
	0x63, 0xa3, 0x5e, 0xd5, 0xc9, 0x17, 0x18, 0x35, 0x4d, 0x6d, 0xf8, 0xf6, 0xd1, 0xf7, 0xe9, 0x46,
	0x83, 0x6b, 0x16, 0xb6, 0xd7, 0x5d, 0x79, 0x13, 0x16, 0x52, 0x78, 0xb0, 0xb6, 0x2b, 0x32, 0x84,
	0xce, 0x37, 0xbe, 0x6c, 0xfe, 0xa2, 0x09, 0xc9, 0x73, 0xe8, 0x7e, 0x67, 0x79, 0xcd, 0xf1, 0xef,
	0xb5, 0x1c, 0xa4, 0x65, 0xbc, 0xdd, 0x3a, 0xf1, 0xc2, 0x39, 0x84, 0xed, 0x8d, 0xdc, 0x60, 0x7f,
	0xec, 0xda, 0xdf, 0x7e, 0x50, 0xce, 0x4a, 0x27, 0xb0, 0xe3, 0x8e, 0x09, 0x21, 0xe0, 0x3b, 0x13,
	0x88, 0x31, 0x79, 0x0c, 0x5d, 0x5e, 0xb0, 0x2c, 0x6f, 0x46, 0xcf, 0x26, 0xe1, 0x07, 0xe8, 0x5f,
	0xcd, 0x8c, 0x1e, 0xab, 0xee, 0x6c, 0xce, 0xb2, 0x12, 0x65, 0x83, 0xa3, 0x87, 0x51, 0x73, 0x35,
	0x0c, 0x78, 0x6a, 0x00, 0x6a, 0x71, 0x63, 0xbf, 0x30, 0xbd, 0x5b, 0x27, 0x8c, 0x0f, 0x9e, 0x58,
	0x23, 0x9c, 0x81, 0x3e, 0xf8, 0x67, 0x9f, 0xce, 0xe2, 0xe1, 0x1d, 0x72, 0x0f, 0xb6, 0x27, 0xd3,
	0xf3, 0x98, 0x4e, 0x27, 0x31, 0x1d, 0x7a, 0xef, 0x77, 0x7e, 0xff, 0xdb, 0xf3, 0xfe, 0xe8, 0xe7,
	0xaf, 0x7e, 0x92, 0x1e, 0xde, 0x9d, 0xd7, 0xff, 0x03, 0x00, 0x00, 0xff, 0xff, 0xa3, 0xa7, 0xc1,
	0x2a, 0x02, 0x04, 0x00, 0x00,
}
