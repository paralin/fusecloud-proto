// Code generated by protoc-gen-gogo.
// source: github.com/fuserobotics/proto/auth/auth.proto
// DO NOT EDIT!

package auth

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import common "github.com/fuserobotics/proto/common"
import permissions "github.com/fuserobotics/proto/permissions"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type User_UserRole int32

const (
	// Nothing special
	User_NONE User_UserRole = 0
	// Access to everything
	User_SUPERUSER User_UserRole = 1
)

var User_UserRole_name = map[int32]string{
	0: "NONE",
	1: "SUPERUSER",
}
var User_UserRole_value = map[string]int32{
	"NONE":      0,
	"SUPERUSER": 1,
}

func (x User_UserRole) String() string {
	return proto.EnumName(User_UserRole_name, int32(x))
}
func (User_UserRole) EnumDescriptor() ([]byte, []int) { return fileDescriptorAuth, []int{0, 0} }

//
// User: a standard user with username, email, password
type User struct {
	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	// Encrypted password for database
	Password string             `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	Meta     *User_UserMetadata `protobuf:"bytes,3,opt,name=meta" json:"meta,omitempty"`
	// certificates, latest at index 0
	Cert []*User_UserCert `protobuf:"bytes,4,rep,name=cert" json:"cert,omitempty"`
	// processed first
	GlobalRole *User_UserRoleSet `protobuf:"bytes,5,opt,name=global_role,json=globalRole" json:"global_role,omitempty"`
	// processed second
	RegionRole map[string]*User_UserRoleSet `protobuf:"bytes,6,rep,name=region_role,json=regionRole" json:"region_role,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
	// extra permissions
	GlobalExtraPermission *permissions.SystemPermissions `protobuf:"bytes,7,opt,name=global_extra_permission,json=globalExtraPermission" json:"global_extra_permission,omitempty"`
	// per region extra permissions
	RegionExtraPermission map[string]*permissions.SystemPermissions `protobuf:"bytes,8,rep,name=region_extra_permission,json=regionExtraPermission" json:"region_extra_permission,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *User) Reset()                    { *m = User{} }
func (m *User) String() string            { return proto.CompactTextString(m) }
func (*User) ProtoMessage()               {}
func (*User) Descriptor() ([]byte, []int) { return fileDescriptorAuth, []int{0} }

func (m *User) GetMeta() *User_UserMetadata {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *User) GetCert() []*User_UserCert {
	if m != nil {
		return m.Cert
	}
	return nil
}

func (m *User) GetGlobalRole() *User_UserRoleSet {
	if m != nil {
		return m.GlobalRole
	}
	return nil
}

func (m *User) GetRegionRole() map[string]*User_UserRoleSet {
	if m != nil {
		return m.RegionRole
	}
	return nil
}

func (m *User) GetGlobalExtraPermission() *permissions.SystemPermissions {
	if m != nil {
		return m.GlobalExtraPermission
	}
	return nil
}

func (m *User) GetRegionExtraPermission() map[string]*permissions.SystemPermissions {
	if m != nil {
		return m.RegionExtraPermission
	}
	return nil
}

type User_UserMetadata struct {
	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Email string `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
}

func (m *User_UserMetadata) Reset()                    { *m = User_UserMetadata{} }
func (m *User_UserMetadata) String() string            { return proto.CompactTextString(m) }
func (*User_UserMetadata) ProtoMessage()               {}
func (*User_UserMetadata) Descriptor() ([]byte, []int) { return fileDescriptorAuth, []int{0, 2} }

type User_UserCert struct {
	Chain     *common.CertChain `protobuf:"bytes,1,opt,name=chain" json:"chain,omitempty"`
	Pkey      string            `protobuf:"bytes,2,opt,name=pkey,proto3" json:"pkey,omitempty"`
	PublicKey string            `protobuf:"bytes,3,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
}

func (m *User_UserCert) Reset()                    { *m = User_UserCert{} }
func (m *User_UserCert) String() string            { return proto.CompactTextString(m) }
func (*User_UserCert) ProtoMessage()               {}
func (*User_UserCert) Descriptor() ([]byte, []int) { return fileDescriptorAuth, []int{0, 3} }

func (m *User_UserCert) GetChain() *common.CertChain {
	if m != nil {
		return m.Chain
	}
	return nil
}

type User_UserRoleSet struct {
	Role []User_UserRole `protobuf:"varint,1,rep,name=role,enum=auth.User_UserRole" json:"role,omitempty"`
}

func (m *User_UserRoleSet) Reset()                    { *m = User_UserRoleSet{} }
func (m *User_UserRoleSet) String() string            { return proto.CompactTextString(m) }
func (*User_UserRoleSet) ProtoMessage()               {}
func (*User_UserRoleSet) Descriptor() ([]byte, []int) { return fileDescriptorAuth, []int{0, 4} }

func init() {
	proto.RegisterType((*User)(nil), "auth.User")
	proto.RegisterType((*User_UserMetadata)(nil), "auth.User.UserMetadata")
	proto.RegisterType((*User_UserCert)(nil), "auth.User.UserCert")
	proto.RegisterType((*User_UserRoleSet)(nil), "auth.User.UserRoleSet")
	proto.RegisterEnum("auth.User_UserRole", User_UserRole_name, User_UserRole_value)
}

var fileDescriptorAuth = []byte{
	// 495 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x84, 0x53, 0xdf, 0x6f, 0xd3, 0x30,
	0x10, 0xa6, 0x6b, 0xba, 0xb5, 0x17, 0x7e, 0x14, 0xc3, 0x68, 0x64, 0x09, 0x34, 0x0d, 0x21, 0x90,
	0x80, 0x54, 0x0c, 0x04, 0x13, 0x7b, 0x9c, 0xf2, 0x84, 0x18, 0x93, 0xab, 0xf2, 0x86, 0x2a, 0x27,
	0xf3, 0xda, 0x88, 0x24, 0x8e, 0x1c, 0x07, 0xe8, 0x23, 0xff, 0x39, 0xf6, 0x39, 0x5b, 0x43, 0xbb,
	0x1f, 0x2f, 0xc9, 0xdd, 0x7d, 0xdf, 0x77, 0x77, 0x3e, 0x9f, 0xe1, 0xed, 0x3c, 0xd5, 0x8b, 0x3a,
	0x0e, 0x13, 0x99, 0x8f, 0xcf, 0xeb, 0x4a, 0x28, 0x19, 0x4b, 0x9d, 0x26, 0xd5, 0xb8, 0x54, 0x52,
	0xcb, 0x31, 0xaf, 0xf5, 0x02, 0x3f, 0x21, 0xfa, 0xc4, 0xb3, 0x36, 0x7d, 0x77, 0xb3, 0xc8, 0x84,
	0x73, 0x59, 0x34, 0x3f, 0x27, 0xa4, 0x47, 0x37, 0x4b, 0x4a, 0xa1, 0xf2, 0xb4, 0xaa, 0x52, 0x59,
	0x54, 0x6d, 0xdb, 0x89, 0xf7, 0xff, 0xee, 0x80, 0x37, 0x35, 0x1a, 0x42, 0xa1, 0x6f, 0xb5, 0x05,
	0xcf, 0x45, 0xd0, 0xd9, 0xeb, 0xbc, 0x1a, 0xb0, 0x4b, 0xdf, 0x62, 0x25, 0xaf, 0xaa, 0xdf, 0x52,
	0x9d, 0x05, 0x5b, 0x0e, 0xbb, 0xf0, 0xc9, 0x6b, 0xf0, 0x72, 0xa1, 0x79, 0xd0, 0x35, 0x71, 0xff,
	0x60, 0x14, 0xe2, 0x89, 0x6c, 0x46, 0xfc, 0x7c, 0x35, 0xd0, 0x19, 0xd7, 0x9c, 0x21, 0x89, 0xbc,
	0x04, 0x2f, 0x11, 0x4a, 0x07, 0xde, 0x5e, 0xd7, 0x90, 0x1f, 0xad, 0x91, 0x8f, 0x0d, 0xc4, 0x90,
	0x40, 0x3e, 0x81, 0x3f, 0xcf, 0x64, 0xcc, 0xb3, 0x99, 0x92, 0x99, 0x08, 0x7a, 0x98, 0xfc, 0xc9,
	0x1a, 0x9f, 0x19, 0x68, 0x22, 0x34, 0x03, 0x47, 0xb5, 0x2e, 0x39, 0x02, 0x5f, 0x89, 0xb9, 0x39,
	0xa0, 0x13, 0x6e, 0x63, 0x21, 0xda, 0x12, 0x32, 0x44, 0x2d, 0x37, 0x2a, 0xb4, 0x5a, 0x32, 0x50,
	0x97, 0x01, 0xf2, 0x1d, 0x46, 0x4d, 0x55, 0xf1, 0x47, 0x2b, 0x3e, 0x5b, 0x8d, 0x2b, 0xd8, 0xc1,
	0x0e, 0x9e, 0x85, 0xed, 0x09, 0x4e, 0x96, 0x95, 0x16, 0xf9, 0xe9, 0x2a, 0xc2, 0x76, 0x9d, 0x3c,
	0xb2, 0xea, 0x55, 0x9c, 0xfc, 0x80, 0x51, 0xd3, 0xd4, 0x46, 0xde, 0x3e, 0x36, 0xf8, 0x62, 0xa3,
	0xc1, 0xb5, 0x14, 0xae, 0xd7, 0x5d, 0x75, 0x15, 0x46, 0xa7, 0xf0, 0x60, 0xed, 0x54, 0x64, 0x08,
	0xdd, 0x9f, 0x62, 0xd9, 0x5c, 0xa4, 0x35, 0xc9, 0x1b, 0xe8, 0xfd, 0xe2, 0x59, 0x2d, 0xf0, 0x02,
	0xaf, 0x9f, 0xa5, 0x23, 0x7d, 0xde, 0x3a, 0xec, 0xd0, 0x05, 0xd0, 0xeb, 0x7b, 0xb9, 0xa2, 0xc2,
	0x87, 0xff, 0x2b, 0xdc, 0x36, 0xab, 0x56, 0xa5, 0x43, 0xb8, 0xdb, 0x5e, 0x16, 0x42, 0xc0, 0x6b,
	0xed, 0x21, 0xda, 0xe4, 0x31, 0xf4, 0x44, 0xce, 0xd3, 0xac, 0x59, 0x40, 0xe7, 0xd0, 0x73, 0xe8,
	0x5f, 0x6c, 0x8e, 0x59, 0xae, 0x5e, 0xb2, 0xe0, 0x69, 0x81, 0x32, 0xff, 0xe0, 0x61, 0xd8, 0xbc,
	0x12, 0x0b, 0x1e, 0x5b, 0x80, 0x39, 0xdc, 0xa6, 0x2f, 0x6d, 0xef, 0x2e, 0x13, 0xda, 0xe4, 0x29,
	0x40, 0x59, 0xc7, 0x59, 0x9a, 0xcc, 0x2c, 0xd2, 0x45, 0x64, 0xe0, 0x22, 0x5f, 0xc4, 0x92, 0x7e,
	0x04, 0xbf, 0x35, 0x25, 0xbb, 0xc7, 0xb8, 0x5e, 0x1d, 0x73, 0x7b, 0xf7, 0x37, 0xf6, 0xd8, 0xb2,
	0x18, 0x12, 0xf6, 0x9f, 0xbb, 0xfe, 0x70, 0xbb, 0xfa, 0xe0, 0x9d, 0x7c, 0x3b, 0x89, 0x86, 0x77,
	0xc8, 0x3d, 0x18, 0x4c, 0xa6, 0xa7, 0x11, 0x9b, 0x4e, 0x22, 0x36, 0xec, 0xc4, 0xdb, 0xf8, 0x14,
	0xdf, 0xff, 0x0b, 0x00, 0x00, 0xff, 0xff, 0x9a, 0xc7, 0x5f, 0x9b, 0x31, 0x04, 0x00, 0x00,
}
